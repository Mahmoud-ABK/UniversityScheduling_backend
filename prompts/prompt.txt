# University Scheduling Project – Comprehensive Overview

## 1. **Project Description**

This project is a comprehensive scheduling system for a university. It is built using Spring Boot and leverages JPA for persistence. The system manages various entities related to scheduling academic sessions, resource allocation, feedback, and notifications. Below is a breakdown of the main components:

### **A. Entities and Their Roles**

- **Personne (Person):**  
    The base class for all individuals in the system.  
    **Attributes:**
    
    - CIN (National ID)
    - Nom (Last name)
    - Prenom (First name)
    - Email
    - Tel (Telephone)
    - Adresse (Address)
- **Étudiant (Student):**  
    Inherits from Personne.  
    **Attributes:**
    
    - Matricule (Student ID)
    - Associated Branche (academic program/specialization)
    - TP (practical sessions) enrollment  
        **Privileges:**
    - Can view their schedule (lectures, tutorials, practicals) and receive notifications.
    - Cannot modify schedules or access administrative functions.
- **Enseignant (Teacher):**  
    Inherits from Personne.  
    **Attributes:**
    
    - CodeEnseignant (Teacher code)
    - Heures (Total teaching hours)
    - List of Seance (sessions) taught
    - List of PropositionDeRattrapage (catch-up proposals)  
        **Privileges:**
    - Can view their teaching schedule and total hours.
    - Can send a Signal (complaint/suggestion) regarding schedule issues and propose catch-up sessions.
    - Cannot directly modify schedules; changes must be approved by an administrator.
- **Administrateur (Administrator):**  
    Inherits from Personne.  
    **Attributes:**
    
    - CodeAdmin (Administrator code)  
        **Privileges:**
    - Full control over scheduling: can create, modify, and adjust sessions (Seance, TD, TP).
    - Handles resource allocation (assigning teachers and rooms).
    - Can import scheduling data from Excel files.
    - Reviews teacher Signals and approves or rejects PropositionDeRattrapage.
    - Sends notifications to users.
    - Cannot manage user accounts (this is reserved for Technicien).
- **Technicien (Technician / Resource Manager):**  
    Inherits from Personne.  
    **Attributes:**
    
    - CodeTechnicien (Technician code)  
        **Privileges:**
    - Manages user accounts (create, update, delete).
    - Assigns roles and sets access privileges.
    - Updates room information (Salle) and ensures system functionality and security.
    - Cannot modify academic scheduling details.
- **Seance (Session):**  
    Represents a scheduled academic session (lecture, tutorial, practical).  
    **Attributes:**
    
    - ID
    - Jour (Day)
    - HeureDebut (Start time)
    - HeureFin (End time)
    - Type (e.g., CR, CI, TD, TP)
    - Matiere (Subject)
    - Frequence (Frequency – empty for weekly, "1/15" for biweekly, or specific date for catch-up)  
        **Associations:**
    - Salle (Room)
    - Enseignant (Teacher)
    - One or more branches (Branche), TDs, and TPs  
        **Notes:**
    - Custom queries are used to detect session conflicts (e.g., overlapping times in the same room or teacher conflicts).
- **Salle (Room):**  
    Represents a classroom or laboratory.  
    **Attributes:**
    
    - Identifiant (Room identifier)
    - Type (Type of room, e.g., lecture hall, lab)
    - Capacite (Capacity)
    - Disponibilite (List of available time slots)  
        **Management:**
    - Managed by the Technicien and assigned by the Administrateur.
- **Notification:**  
    Represents messages sent to users about schedule changes, alerts, or reminders.  
    **Attributes:**
    
    - Message
    - Date
    - Type
    - Read (boolean)  
        **Associations:**
    - Recepteur (Recipient, a Personne)
    - Expediteur (Sender, a Personne or system)
- **Signal:**  
    Represents a complaint, suggestion, or alert submitted by a teacher regarding schedule issues.  
    **Attributes:**
    
    - Message
    - Severity
    - Timestamp  
        **Function:**
    - Used for logging and addressing scheduling conflicts.
- **PropositionDeRattrapage (Catch-Up Proposal):**  
    Represents a proposal by a teacher for a catch-up session.  
    **Attributes:**
    
    - Date
    - Reason
    - Status (pending, approved, rejected)  
        **Process:**
    - Submitted by an Enseignant and reviewed by an Administrateur.
- **FichierExcel (Excel File):**  
    Represents an Excel file imported into the system for scheduling data.  
    **Attributes:**
    
    - FileName
    - Status (import successful/failed)
    - Errors (list of encountered errors)
    - ImportDate
- **Branche (Academic Program/Branch):**  
    Represents an academic specialization or program.  
    **Attributes:**
    
    - Niveau (Level of study)
    - Specialite (Specialization)
    - NbTD (Number of tutorials)
    - Departement (Department)  
        **Associations:**
    - Linked with students (Etudiant) and sessions (Seance).
- **TD (Tutorial Session):**  
    Represents group tutorial sessions.  
    **Attributes:**
    
    - NbTP (Number of practical sessions associated)  
        **Associations:**
    - Linked to a Branche and a list of TPs.
- **TP (Practical Session):**  
    Represents hands-on lab sessions.  
    **Associations:**
    
    - Linked to a TD and a list of Etudiants.

### **B. Use Case and Class Diagrams**

- **Use Case Diagram:**  
    Actors include Administrateur, Professeur (Teacher), Étudiant (Student), and Technicien & Gestionnaire. Key use cases include:
    
    - Importation des fichiers Excel
    - Génération automatique des emplois du temps
    - Notifications automatiques
    - Modification des emplois du temps
    - Proposition de rattrapage
    - Consultation des heures d’enseignement
    - Consultation de l’emploi du temps
    - Répartition des salles et ressources
    - Authentification
- **Class Diagram:**  
    Provides relationships among entities (e.g., inheritance of Personne, associations between Seance and Salle, Enseignant, Branche, TD, TP, etc.) and outlines key attributes and methods.
    

---

## 2. **DTOs (Data Transfer Objects)**

DTOs are used to transfer data between processes (e.g., from the backend to the frontend) while encapsulating entity details. Here’s a summary of the DTOs defined in the project:

- **PersonneDTO:**
    
    - Fields: id, cin, nom, prenom, email, tel, adresse
- **AdministrateurDTO (extends PersonneDTO):**
    
    - Additional Field: codeAdmin
- **BrancheDTO:**
    
    - Fields: id, niveau, specialite, nbTD, departement
    - Associations: List of SeanceDTO (sessions)
- **EnseignantDTO (extends PersonneDTO):**
    
    - Additional Fields: codeEnseignant, heures
    - Associations: Lists of IDs for seances and propositionsDeRattrapage
- **EtudiantDTO (extends PersonneDTO):**
    
    - Additional Fields: matricule
    - Associations: brancheId (ID of the associated Branche) and tpId (ID of the associated TP)
- **FichierExcelDTO:**
    
    - Fields: id, fileName, status, errors (list), importDate
- **NotificationDTO:**
    
    - Fields: id, message, date, type, read
    - Associations: recepteurId and expediteurId (IDs of the associated Personne entities)
- **PropositionDeRattrapageDTO:**
    
    - Fields: id, date, reason, status
    - Associations: enseignantId (ID of the associated Enseignant)
- **SalleDTO:**
    
    - Fields: id, identifiant, type, capacite, disponibilite (list)
- **SeanceDTO:**
    
    - Fields: id, jour, heureDebut, heureFin, type (CR, CI, TD, TP), matiere, frequence
    - Associations:
        - salle (SalleDTO)
        - enseignant (EnseignantDTO)
        - branches (List<BrancheDTO>)
        - tds (List<TDDTO>)
        - tps (List<TPDTO>)
- **SignalDTO:**
    
    - Fields: id, message, severity, timestamp
- **TDDTO:**
    
    - Fields: id, nb, nbTP
    - Associations: branche (BrancheDTO) and tpList (List<TPDTO>)
- **TechnicienDTO (extends PersonneDTO):**
    
    - Additional Field: codeTechnicien
- **TPDTO:**
    
    - Fields: id, nb
    - Associations: td (TDDTO) and etudiants (List<EtudiantDTO>)

---

## 3. **Repository Functions**

All repositories extend Spring Data JPA’s `JpaRepository`, which provides a comprehensive set of default CRUD operations, pagination, sorting, and example-based query methods. The repositories include:

- **AdministrateurRepository**
- **EnseignantRepository**
- **FichierExcelRepository**
- **PersonneRepository**
- **SalleRepository**
- **SignalRepository**
- **TechnicienRepository**
- **BrancheRepository**
- **EtudiantRepository**
- **NotificationRepository**
- **PropositionDeRattrapageRepository**
- **SeanceRepository**
- **TDRepository**
- **TPRepository**

### **Key Points:**

- **Default JPA Methods Include:**
    
    - Save operations: `save()`, `saveAll()`, `saveAndFlush()`, `flush()`, etc.
    - Retrieval operations: `findById()`, `findAll()`, `getById()`, `existsById()`, `count()`, etc.
    - Delete operations: `deleteById()`, `delete()`, `deleteAll()`, `deleteInBatch()`, etc.
    - Pagination and sorting support via `Page<T>` and `Sort`.
- **Custom Queries in SeanceRepository:**  
    The `SeanceRepository` includes custom JPQL queries for detecting session conflicts:
    
    - **findConflictingSeancePairs():**  
        Returns pairs of sessions that conflict (e.g., overlapping times on the same day with shared room, teacher, or branch/TD/TP associations).
    - **findConflictingByRooms():**  
        Finds session pairs with room conflicts.
    - **findRoomConflictsForSeance():**  
        Finds conflicting sessions for a given session by comparing day, room, and overlapping time intervals.

---

## 4. **Service Interfaces**

Service interfaces encapsulate the business logic of the application. They are used to manage operations on the entities via the DTOs. Below is a summary of each service interface:

### **A. AdminService**

- **Purpose:**  
    To manage administrative tasks.
- **Key Operations:**
    - Fetch all teacher signals for review.
    - Mark a signal as resolved (with a resolution message).
    - Fetch, approve, or reject catch-up proposals (PropositionDeRattrapage).
    - Import Excel data for scheduling (FichierExcelDTO).
    - Retrieve unread notifications for a specific user.
    - Retrieve a list of available rooms (SalleDTO) for a given time slot.

### **B. FeedbackService**

- **Purpose:**  
    To handle teacher feedback and catch-up proposals.
- **Key Operations:**
    - **PropositionDeRattrapage:** Create, retrieve (by ID and all), update, and delete proposals.
    - **Signal:** Create, retrieve (by ID and all), update, and delete signals.
    - Mark a teacher’s signal as resolved with an optional resolution message.
    - Approve or reject catch-up proposals.

### **C. NotificationService**

- **Purpose:**  
    To manage notifications sent within the system.
- **Key Operations:**
    - Create, retrieve (by ID and all), update, and delete notifications.
    - Send notifications (e.g., push or email).
    - Retrieve only the unread notifications for a user.

### **D. ResourceService**

- **Purpose:**  
    To manage resources like rooms and imported Excel files.
- **Key Operations:**
    - **Salle:** Create, retrieve, update, and delete rooms.
    - **FichierExcel:** Import, retrieve, and delete Excel file data.
    - Retrieve a list of available rooms for a specified time slot.

### **E. ScheduleService**

- **Purpose:**  
    To manage academic sessions, tutorials, and practical sessions.
- **Key Operations:**
    - **Seance:** Create, retrieve (by ID and all), update, and delete sessions.
    - **TD (Tutorial):** Create, retrieve, update, and delete tutorials.
    - **TP (Practical):** Create, retrieve, update, and delete practical sessions.
    - Retrieve sessions for a given teacher (for their schedule view).
    - Retrieve sessions for a given student (by branch or enrollment).
    - Calculate the total teaching hours for a teacher.
    - Query sessions by branch, TP, or TD.
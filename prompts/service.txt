package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for administrator operations.
 * Handles schedule management, makeup sessions, and system-wide notifications.
 */
public interface AdministrateurService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves administrator details by ID.
     * @param id Administrator's unique identifier
     * @return Administrator DTO
     * @throws CustomException if administrator not found
     */
    AdministrateurDTO findById(Long id) throws CustomException;

    /**
     * Retrieves all administrators.
     * @return List of all administrators
     * @throws CustomException if retrieval fails
     */
    List<AdministrateurDTO> findAll() throws CustomException;

    /**
     * Creates a new administrator.
     * @param administrateur Administrator DTO containing the new data
     * @return Created administrator DTO
     * @throws CustomException if creation fails
     */
    AdministrateurDTO create(AdministrateurDTO administrateur) throws CustomException;

    /**
     * Updates an existing administrator.
     * @param id Administrator's unique identifier
     * @param administrateur Updated administrator data
     * @return Updated administrator DTO
     * @throws CustomException if update fails
     */
    AdministrateurDTO update(Long id, AdministrateurDTO administrateur) throws CustomException;

    /**
     * Deletes an administrator by ID.
     * @param id Administrator's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================



    /**
     * Retrieves all makeup session requests.
     * @return List of makeup session proposals
     * @throws CustomException if retrieval fails
     */
    List<PropositionDeRattrapageDTO> getAllMakeupSessions() throws CustomException;

    /**
     * Approves a makeup session request.
     * @param id Makeup session proposal ID
     * @throws CustomException if approval fails
     */
    void approveMakeupSession(Long id) throws CustomException;

    /**
     * Rejects a makeup session request.
     * @param id Makeup session proposal ID
     * @throws CustomException if rejection fails
     */
    void rejectMakeupSession(Long id) throws CustomException;


}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for managing academic branches.
 * Includes CRUD operations and additional branch-related functionalities.
 */
public interface BrancheService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves branch details by ID.
     * @param id Branch's unique identifier
     * @return Branch DTO
     * @throws CustomException if branch not found
     */
    BrancheDTO findById(Long id) throws CustomException;

    /**
     * Retrieves all branches.
     * @return List of all branches
     * @throws CustomException if retrieval fails
     */
    List<BrancheDTO> findAll() throws CustomException;

    /**
     * Creates a new branch.
     * @param branche Branch DTO containing the new data
     * @return Created branch DTO
     * @throws CustomException if creation fails
     */
    BrancheDTO create(BrancheDTO branche) throws CustomException;

    /**
     * Updates an existing branch.
     * @param id Branch's unique identifier
     * @param branche Updated branch data
     * @return Updated branch DTO
     * @throws CustomException if update fails
     */
    BrancheDTO update(Long id, BrancheDTO branche) throws CustomException;

    /**
     * Deletes a branch by ID.
     * @param id Branch's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================


    /**
     * Retrieves all seances associated with a branch.
     * @param branchId Branch's unique identifier
     * @return List of courses associated with the branch
     * @throws CustomException if retrieval fails
     */
    List<SeanceDTO> getSchedule(Long branchId) throws CustomException;


}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for teacher operations.
 * Manages teacher schedules, teaching hours, and communication.
 */
public interface EnseignantService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves teacher details by ID.
     * @param id Teacher's unique identifier
     * @return Teacher DTO
     * @throws CustomException if teacher not found
     */
    EnseignantDTO findById(Long id) throws CustomException;

    /**
     * Retrieves all teachers.
     * @return List of all teachers
     * @throws CustomException if retrieval fails
     */
    List<EnseignantDTO> findAll() throws CustomException;

    /**
     * Creates a new teacher.
     * @param enseignant Teacher DTO containing the new data
     * @return Created teacher DTO
     * @throws CustomException if creation fails
     */
    EnseignantDTO create(EnseignantDTO enseignant) throws CustomException;

    /**
     * Updates an existing teacher's information.
     * @param id Teacher's unique identifier
     * @param enseignant Updated teacher data
     * @return Updated teacher DTO
     * @throws CustomException if update fails
     */
    EnseignantDTO update(Long id, EnseignantDTO enseignant) throws CustomException;

    /**
     * Deletes a teacher by ID.
     * @param id Teacher's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Retrieves teacher's schedule.
     * @param id Teacher's unique identifier
     * @return List of scheduled sessions
     * @throws CustomException if schedule retrieval fails
     */
    List<SeanceDTO> getSchedule(Long id) throws CustomException;

    /**
     * Calculates total teaching hours.
     * @param teacherid Teacher's unique identifier
     * @param startdate the startdate of counting
     * @param enddate the enddate of counting
     * weekly sessions are counted once in a week
     * 1/15 session counts half per week
     * makeup session that have a date in frequency counts only once
     * @return Total hours taught between start and end date
     * @throws CustomException if calculation fails
     */
    int getTotalTeachingHours(Long teacherid,String startdate,String enddate) throws CustomException;

    /**
     * Submits makeup session request.
     * @param id Teacher's unique identifier
     * @param proposition Makeup session proposal DTO
     * @return Created makeup session proposal DTO
     * @throws CustomException if submission fails
     */
    PropositionDeRattrapageDTO submitMakeupRequest(Long id, PropositionDeRattrapageDTO proposition) throws CustomException;

    /**
     * Submits an issue or suggestion from a teacher.
     * @param id Teacher's unique identifier
     * @param signal Signal DTO containing issue or suggestion
     * @return Created signal DTO
     * @throws CustomException if submission fails
     */
    SignalDTO submitSignal(Long id, SignalDTO signal) throws CustomException;

    /**
     * Retrieves all signals submitted by a teacher.
     * @param id Teacher's unique identifier
     * @return List of submitted signals
     * @throws CustomException if retrieval fails
     */
    List<SignalDTO> getSignals(Long id) throws CustomException;

    /**
     * get all subjects taught for a teacher
     * @param id teacher id
     * @return all subject taught
     * @Exception return a CustomException
     */
    List<String> getSubjects(Long id) throws CustomException;

    /**
     * get all studentGroupsTaught Later to be mapped in
     * @param id teacher id
     * @return all studentgroups
     * @Exception return a CustomException
     */
    List<TPDTO> getStudentGroups(Long id) throws CustomException;


}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for student operations.
 * Manages student schedules and notifications.
 */
public interface EtudiantService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves student details by ID.
     * @param id Student's unique identifier
     * @return Student DTO
     * @throws CustomException if student not found
     */
    EtudiantDTO findById(Long id) throws CustomException;

    /**
     * Retrieves all students.
     * @return List of all students
     * @throws CustomException if retrieval fails
     */
    List<EtudiantDTO> findAll() throws CustomException;

    /**
     * Creates a new student.
     * @param etudiant Student DTO containing the new data
     * @return Created student DTO
     * @throws CustomException if creation fails
     */
    EtudiantDTO create(EtudiantDTO etudiant) throws CustomException;

    /**
     * Updates an existing student's information.
     * @param id Student's unique identifier
     * @param etudiant Updated student data
     * @return Updated student DTO
     * @throws CustomException if update fails
     */
    EtudiantDTO update(Long id, EtudiantDTO etudiant) throws CustomException;

    /**
     * Deletes a student by ID.
     * @param id Student's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Retrieves student's personal schedule.
     * @param id Student's unique identifier
     * @return List of scheduled sessions
     * @throws CustomException if schedule retrieval fails
     */
    List<SeanceDTO> getPersonalSchedule(Long id) throws CustomException;

    /**
     * Retrieves schedule for a specific branch.
     * @param brancheId Branch's unique identifier
     * @return List of scheduled sessions for branch
     * @throws CustomException if schedule retrieval fails
     */
    List<SeanceDTO> getBranchSchedule(Long brancheId) throws CustomException;

    /**
     * Retrieves student's notifications.
     * @param id Student's unique identifier
     * @return List of notifications
     * @throws CustomException if retrieval fails
     */
    List<NotificationDTO> getNotifications(Long id) throws CustomException;
}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for Excel file management.
 * Handles upload and tracking of Excel schedule imports.
 */
public interface ExcelFileService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves an Excel file by ID.
     * @param id Excel file's unique identifier
     * @return Excel file DTO
     * @throws CustomException if file not found
     */
    FichierExcelDTO findById(Long id) throws CustomException;

    /**
     * Retrieves all Excel files.
     * @return List of all Excel file imports
     * @throws CustomException if retrieval fails
     */
    List<FichierExcelDTO> findAll() throws CustomException;

    /**
     * Creates a new Excel file entry in the database.
     * @param fichierExcel Excel file DTO containing the data to be saved
     * @return Created Excel file DTO
     * @throws CustomException if creation fails
     */
    FichierExcelDTO create(FichierExcelDTO fichierExcel) throws CustomException;

    /**
     * Updates an existing Excel file entry.
     * @param id Excel file's unique identifier
     * @param fichierExcel Updated Excel file data
     * @return Updated Excel file DTO
     * @throws CustomException if update fails
     */
    FichierExcelDTO update(Long id, FichierExcelDTO fichierExcel) throws CustomException;

    /**
     * Deletes an Excel file entry by ID.
     * @param id Excel file's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Uploads and processes an Excel file.
     * @param file Excel file data
     * @param seanceDTOS the list of seance dtos to add to database
     * @throws CustomException if upload fails
     */
    void upload(FichierExcelDTO file , List<SeanceDTO> seanceDTOS) throws CustomException;

    /**
     * Retrieves the import history of all Excel files.
     * @return List of imported Excel files
     * @throws CustomException if retrieval fails
     */
    List<FichierExcelDTO> getImportHistory() throws CustomException;
}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for notification management.
 * Handles system notifications and user alerts.
 */
public interface NotificationService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves a notification by ID.
     * @param id Notification's unique identifier
     * @return Notification DTO
     * @throws CustomException if notification not found
     */
    NotificationDTO findById(Long id) throws CustomException;

    /**
     * Retrieves all notifications.
     * @return List of all notifications
     * @throws CustomException if retrieval fails
     */
    List<NotificationDTO> findAll() throws CustomException;

    /**
     * Creates a new notification.
     * @param notification Notification DTO containing the data to be saved
     * @return Created Notification DTO
     * @throws CustomException if creation fails
     */
    NotificationDTO create(NotificationDTO notification) throws CustomException;

    /**
     * Updates an existing notification.
     * @param id Notification's unique identifier
     * @param notification Updated Notification DTO
     * @return Updated Notification DTO
     * @throws CustomException if update fails
     */
    NotificationDTO update(Long id, NotificationDTO notification) throws CustomException;

    /**
     * Deletes a notification by ID.
     * @param id Notification's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Marks a notification as read.
     * @param id Notification's unique identifier
     * @throws CustomException if update fails
     */
    void markAsRead(Long id) throws CustomException;

    /**
     * Retrieves unread notifications.
     * @return List of unread notifications
     * @throws CustomException if retrieval fails
     */
    List<NotificationDTO> getUnreadNotifications() throws CustomException;

    /**
     * Broadcasts a notification to all users.
     * @param notificationDTO Notification data to be broadcasted usually recepteur is empty
     * @throws CustomException if broadcasting fails
     */
    void broadcastNotification(NotificationDTO notificationDTO) throws CustomException;

    /**
     * Notify all teachers teacher
     * @param notificationDTO notification info
     * @throws CustomException if fails
     */
    void sendNotificationToTeachers(NotificationDTO notificationDTO) throws CustomException;


    /**
     * @param notificationDTO content
     * @throws CustomException if fails
     */
    void sendNotificationToStudents(NotificationDTO notificationDTO) throws CustomException;

    /**
     * @param notificationDTO content
     * @param brancheDTOS branches
     * @throws CustomException if fails
     */
    void sendNotificationToBranches(NotificationDTO notificationDTO,List<BrancheDTO> brancheDTOS) throws CustomException;

    /**
     * @param notificationDTO content
     * @param brancheDTOS branches
     * @throws CustomException if fails
     */
    void sendNotificationToBranche(NotificationDTO notificationDTO,BrancheDTO brancheDTOS) throws CustomException;

    /**
     * @param notificationDTO content
     * @param tddtos destination
     * @throws CustomException if fails
     */
    void sendNotificationToTDs(NotificationDTO notificationDTO,List<TDDTO> tddtos) throws CustomException;

    /**
     * @param notificationDTO content
     * @param tddto destination
     * @throws CustomException if fails
     */
    void sendNotificationToTD(NotificationDTO notificationDTO,TDDTO tddto) throws CustomException;

    /**
     * @param notificationDTO content
     * @param tpdtos destination
     * @throws CustomException if fails
     */
    void sendNotificationToTPs(NotificationDTO notificationDTO,List<TPDTO> tpdtos) throws CustomException;

    /**
     * @param notificationDTO content
     * @param tpdto destination
     * @throws CustomException if fails
     */
    void sendNotificationToTP(NotificationDTO notificationDTO,TPDTO tpdto) throws CustomException;


}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for room management.
 * Handles CRUD operations and availability checking for rooms.
 */
public interface SalleService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves a room by its ID.
     * @param id Room's unique identifier
     * @return Room DTO
     * @throws CustomException if room not found
     */
    SalleDTO findById(Long id) throws CustomException;

    /**
     * Retrieves all rooms.
     * @return List of all rooms
     * @throws CustomException if retrieval fails
     */
    List<SalleDTO> findAll() throws CustomException;

    /**
     * Creates a new room.
     * @param salle Room data to be saved
     * @return Created room
     * @throws CustomException if creation fails
     */
    SalleDTO create(SalleDTO salle) throws CustomException;

    /**
     * Updates an existing room.
     * @param id Room's unique identifier
     * @param salle Updated room data
     * @return Updated room
     * @throws CustomException if update fails
     */
    SalleDTO update(Long id, SalleDTO salle) throws CustomException;

    /**
     * Deletes a room.
     * @param id Room's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Finds available rooms for a specific time slot.
     * @param date Desired date
     * @param startTime Start time
     * @param day day
     * @param endTime End time
     * @return List of available rooms
     * @throws CustomException if search fails
     */
    List<SalleDTO> getAvailableRooms(String date, String day,String startTime, String endTime) throws CustomException;
}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for session management.
 * Handles CRUD operations and conflict detection for teaching sessions.
 */
public interface SeanceService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves all teaching sessions.
     * @return List of all sessions
     * @throws CustomException if retrieval fails
     */
    List<SeanceDTO> findAll() throws CustomException;

    /**
     * Retrieves session by ID.
     * @param id Session's unique identifier
     * @return Session DTO
     * @throws CustomException if session not found
     */
    SeanceDTO findById(Long id) throws CustomException;

    /**
     * Creates a new teaching session.
     * @param seance Session data to be created
     * @return Created session
     * @throws CustomException if creation fails
     */
    SeanceDTO create(SeanceDTO seance) throws CustomException;

    /**
     * Updates an existing teaching session.
     * @param id Session's unique identifier
     * @param seance Updated session data
     * @return Updated session
     * @throws CustomException if update fails
     */
    SeanceDTO update(Long id, SeanceDTO seance) throws CustomException;

    /**
     * Deletes a teaching session.
     * @param id Session's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Retrieves all session conflicts.
     * @return List of session conflicts
     * @throws CustomException if retrieval fails
     */
    List<SeanceConflictDTO> getAllConflicts() throws CustomException;


    /**
     * Retrieves all room conflicts.
     * @return List of room conflicts
     * @throws CustomException if retrieval fails
     */
    List<SeanceRoomConflictDTO> getRoomConflicts() throws CustomException;

    /**
     * Retrieves conflicts for a specific session.
     * @param seanceId Session's unique identifier
     * @return List of conflicts for the given session
     * @throws CustomException if retrieval fails
     */
    List<SingleSeanceConflictDTO> getConflictsForSession(Long seanceId) throws CustomException;
}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for tutorial group management.
 * Handles operations related to tutorial sessions.
 */
public interface TDService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves all tutorial groups.
     * @return List of all tutorial groups
     * @throws CustomException if retrieval fails
     */
    List<TDDTO> findAll() throws CustomException;

    /**
     * Retrieves tutorial group by ID.
     * @param id Tutorial group's unique identifier
     * @return Tutorial group DTO
     * @throws CustomException if group not found
     */
    TDDTO findById(Long id) throws CustomException;

    /**
     * Creates a new tutorial group.
     * @param td Tutorial group data to be created
     * @return Created tutorial group DTO
     * @throws CustomException if creation fails
     */
    TDDTO create(TDDTO td) throws CustomException;

    /**
     * Updates an existing tutorial group.
     * @param id Tutorial group's unique identifier
     * @param td Updated tutorial group data
     * @return Updated tutorial group DTO
     * @throws CustomException if update fails
     */
    TDDTO update(Long id, TDDTO td) throws CustomException;

    /**
     * Deletes a tutorial group.
     * @param id Tutorial group's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Retrieves practical sessions for a specific tutorial group.
     * @param tdId Tutorial group's unique identifier
     * @return List of practical sessions (TP)
     * @throws CustomException if retrieval fails
     */
    List<TPDTO> getTPs(Long tdId) throws CustomException;
    /**
     * id is TD id
     * generarte the schedule for that Td( including its Branch sessions )
     * @throws CustomException if generation fails
     */
    void generateSchedule(Long id) throws CustomException;

}
package com.scheduling.universityschedule_backend.service;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import java.util.List;

/**
 * Service interface for practical session management.
 * Handles operations related to practical/lab sessions.
 */
public interface TPService {

    // ============================
    //          CRUD Operations
    // ============================

    /**
     * Retrieves all practical sessions.
     * @return List of all practical sessions
     * @throws CustomException if retrieval fails
     */
    List<TPDTO> findAll() throws CustomException;

    /**
     * Retrieves practical session by ID.
     * @param id Practical session's unique identifier
     * @return Practical session DTO
     * @throws CustomException if session not found
     */
    TPDTO findById(Long id) throws CustomException;

    /**
     * Creates a new practical session.
     * @param tp Practical session data to be created
     * @return Created practical session DTO
     * @throws CustomException if creation fails
     */
    TPDTO create(TPDTO tp) throws CustomException;

    /**
     * Updates an existing practical session.
     * @param id Practical session's unique identifier
     * @param tp Updated practical session data
     * @return Updated practical session DTO
     * @throws CustomException if update fails
     */
    TPDTO update(Long id, TPDTO tp) throws CustomException;

    /**
     * Deletes a practical session.
     * @param id Practical session's unique identifier
     * @throws CustomException if deletion fails
     */
    void delete(Long id) throws CustomException;


    // ============================
    //          Functionalities
    // ============================

    /**
     * Retrieves students enrolled in a practical session.
     * @param tpId Practical session's unique identifier
     * @return List of students enrolled in the practical session
     * @throws CustomException if retrieval fails
     */
    List<EtudiantDTO> getStudents(Long tpId) throws CustomException;

    /**
     * id is TP id
     * generarte the schedule for that TP ( including its TD and Branch sessions
     * @throws CustomException if generation fails
     */
    void generateSchedule(Long id) throws CustomException;

}

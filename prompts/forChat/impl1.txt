package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.AdministrateurDTO;
import com.scheduling.universityschedule_backend.dto.PropositionDeRattrapageDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.*;
import com.scheduling.universityschedule_backend.repository.AdministrateurRepository;
import com.scheduling.universityschedule_backend.repository.PropositionDeRattrapageRepository;
import com.scheduling.universityschedule_backend.repository.SalleRepository;
import com.scheduling.universityschedule_backend.repository.SeanceRepository;
import com.scheduling.universityschedule_backend.service.AdministrateurService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service implementation for administrator operations.
 * Handles schedule management, makeup sessions, and system-wide notifications.
 */
@Service
@Transactional
public class AdministrateurServiceImpl implements AdministrateurService {

    /**
     * Status constants for makeup session proposals
     */
    private static final String STATUS_APPROVED = "approved";
    private static final String STATUS_REJECTED = "rejected";

    private final AdministrateurRepository administrateurRepository;
    private final PropositionDeRattrapageRepository propositionDeRattrapageRepository;
    private final EntityMapper entityMapper;
    private final SalleRepository salleRepository;
    private final SeanceRepository seanceRepository;


    /**
     * Constructor injection for dependencies
     */
    public AdministrateurServiceImpl(AdministrateurRepository administrateurRepository,
                                     PropositionDeRattrapageRepository propositionDeRattrapageRepository,
                                     EntityMapper entityMapper, SalleRepository salleRepository,SeanceRepository seanceRepository) {
        this.administrateurRepository = administrateurRepository;
        this.propositionDeRattrapageRepository = propositionDeRattrapageRepository;
        this.entityMapper = entityMapper;
        this.salleRepository = salleRepository;
        this.seanceRepository = seanceRepository;

    }

    @Override
    public AdministrateurDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Administrator ID cannot be null");
            }

            // Retrieve administrator
            Administrateur administrateur = administrateurRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Administrator not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toAdministrateurDTO(administrateur);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve administrator with ID: " + id, e);
        }
    }

    @Override
    public List<AdministrateurDTO> findAll() throws CustomException {
        try {
            // Retrieve all administrators
            List<Administrateur> administrateurs = administrateurRepository.findAll();

            // Handle empty list case
            if (administrateurs.isEmpty()) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return administrateurs.stream()
                    .map(entityMapper::toAdministrateurDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all administrators", e);
        }
    }

    @Override
    public AdministrateurDTO create(AdministrateurDTO administrateurDTO) throws CustomException {
        try {
            // Validate input
            if (administrateurDTO == null) {
                throw new CustomException("Administrator data cannot be null");
            }

            // Check for duplicate ID if provided
            if (administrateurDTO.getId() != null && administrateurRepository.existsById(administrateurDTO.getId())) {
                throw new CustomException("Administrator with ID " + administrateurDTO.getId() + " already exists");
            }

            // Convert to entity
            Administrateur administrateur = entityMapper.toAdministrateur(administrateurDTO);

            // Save entity
            Administrateur savedAdministrateur = administrateurRepository.save(administrateur);

            // Convert back to DTO
            return entityMapper.toAdministrateurDTO(savedAdministrateur);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to create administrator", e);
        }
    }

    @Override
    public AdministrateurDTO update(Long id, AdministrateurDTO administrateurDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Administrator ID cannot be null");
            }

            if (administrateurDTO == null) {
                throw new CustomException("Administrator data cannot be null");
            }

            // Find existing administrator
            Administrateur existingAdministrateur = administrateurRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Administrator not found with ID: " + id));

            // Update entity with DTO data
            entityMapper.updateFromDto(administrateurDTO, existingAdministrateur);

            // Save updated entity
            Administrateur updatedAdministrateur = administrateurRepository.save(existingAdministrateur);

            // Convert back to DTO
            return entityMapper.toAdministrateurDTO(updatedAdministrateur);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to update administrator with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Administrator ID cannot be null");
            }

            // Check if administrator exists
            if (!administrateurRepository.existsById(id)) {
                throw new CustomException("Administrator not found with ID: " + id);
            }

            // Delete administrator
            administrateurRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete administrator with ID: " + id, e);
        }
    }

    @Override
    public List<PropositionDeRattrapageDTO> getAllMakeupSessions() throws CustomException {
        try {
            // Retrieve all makeup session proposals
            List<PropositionDeRattrapage> propositions = propositionDeRattrapageRepository.findAll();

            // Handle empty list case
            if (propositions.isEmpty()) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return propositions.stream()
                    .map(entityMapper::toPropositionDeRattrapageDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve makeup session proposals", e);
        }
    }
    // still needs refinement
    // In AdministrateurServiceImpl.java
    @Override
    public PropositionDeRattrapageDTO approveMakeupSession(Long id, Long salleId) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Makeup session proposal ID cannot be null");
            }

            // Find existing makeup session proposal
            PropositionDeRattrapage proposition = propositionDeRattrapageRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Makeup session proposal not found with ID: " + id));

            if (proposition.getStatus() == Status.APPROVED) {
                throw new CustomException("Makeup session proposal is already approved");
            }

            if (salleId == null) {
                // Set status to SCHEDULED if no room is assigned
                proposition.setStatus(Status.SCHEDULED);
                PropositionDeRattrapage savedProposition = propositionDeRattrapageRepository.save(proposition);
                return entityMapper.toPropositionDeRattrapageDTO(savedProposition);
            } else {
                // Find the room
                Salle salle = salleRepository.findById(salleId)
                        .orElseThrow(() -> new CustomException("Room not found with ID: " + salleId));

                // Create new Seance from proposition
                Seance newSeance = new Seance();
                newSeance.setName(proposition.getName());
                newSeance.setMatiere(proposition.getMatiere());
                newSeance.setType(proposition.getType());
                newSeance.setHeureDebut(proposition.getHeureDebut());
                newSeance.setHeureFin(proposition.getHeureFin());
                newSeance.setDate(proposition.getDate().toLocalDate());
                newSeance.setJour(proposition.getDate().getDayOfWeek());
                newSeance.setFrequence(FrequenceType.CATCHUP);
                newSeance.setSalle(salle);
                newSeance.setEnseignant(proposition.getEnseignant());
                newSeance.setBranches(new ArrayList<>(proposition.getBranches()));
                newSeance.setTds(new ArrayList<>(proposition.getTds()));
                newSeance.setTps(new ArrayList<>(proposition.getTps()));

                // Save the new Seance
                seanceRepository.save(newSeance);

                // Update proposition status
                proposition.setStatus(Status.APPROVED);
                PropositionDeRattrapage savedProposition = propositionDeRattrapageRepository.save(proposition);

                return entityMapper.toPropositionDeRattrapageDTO(savedProposition);
            }
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to process makeup session proposal with ID: " + id, e);
        }
    }

    @Override
    public PropositionDeRattrapageDTO rejectMakeupSession(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Makeup session proposal ID cannot be null");
            }

            // Find existing makeup session proposal
            PropositionDeRattrapage proposition = propositionDeRattrapageRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Makeup session proposal not found with ID: " + id));

            // Validate current status
            if (proposition.getStatus() == Status.REJECTED) {
                return entityMapper.toPropositionDeRattrapageDTO(proposition); // Already rejected, no need to update
            }

            if (proposition.getStatus() == Status.APPROVED) {
                throw new CustomException("Cannot reject: makeup session proposal already approved");
            }

            // Update status to rejected
            proposition.setStatus(Status.REJECTED);
            propositionDeRattrapageRepository.save(proposition);
            return entityMapper.toPropositionDeRattrapageDTO(proposition);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to reject makeup session proposal with ID: " + id, e);
        }
    }
    // AdministrateurServiceImpl.java
    @Override
    public PropositionDeRattrapageDTO approveScheduled(Long id, Long salleId) throws CustomException {
        try {
            // Validate inputs
            if (id == null || salleId == null) {
                throw new CustomException("Both proposal ID and room ID are required");
            }

            // Find existing makeup session proposal
            PropositionDeRattrapage proposition = propositionDeRattrapageRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Makeup session proposal not found with ID: " + id));

            // Validate current status
            if (proposition.getStatus() != Status.SCHEDULED) {
                throw new CustomException("Can only approve SCHEDULED makeup sessions");
            }

            // Find the room
            Salle salle = salleRepository.findById(salleId)
                    .orElseThrow(() -> new CustomException("Room not found with ID: " + salleId));

            // Create new Seance from proposition
            Seance newSeance = new Seance();
            newSeance.setName(proposition.getName());
            newSeance.setMatiere(proposition.getMatiere());
            newSeance.setType(proposition.getType());
            newSeance.setHeureDebut(proposition.getHeureDebut());
            newSeance.setHeureFin(proposition.getHeureFin());
            newSeance.setDate(proposition.getDate().toLocalDate());
            newSeance.setJour(proposition.getDate().getDayOfWeek());
            newSeance.setFrequence(FrequenceType.CATCHUP);
            newSeance.setSalle(salle);
            newSeance.setEnseignant(proposition.getEnseignant());
            newSeance.setBranches(new ArrayList<>(proposition.getBranches()));
            newSeance.setTds(new ArrayList<>(proposition.getTds()));
            newSeance.setTps(new ArrayList<>(proposition.getTps()));

            // Save the new Seance
            seanceRepository.save(newSeance);

            // Update proposition status
            proposition.setStatus(Status.APPROVED);
            PropositionDeRattrapage savedProposition = propositionDeRattrapageRepository.save(proposition);

            return entityMapper.toPropositionDeRattrapageDTO(savedProposition);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to approve scheduled makeup session with ID: " + id, e);
        }
    }

    @Override
    public PropositionDeRattrapageDTO rejectScheduled(Long id, String reason) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Proposal ID cannot be null");
            }

            if (reason == null || reason.trim().isEmpty()) {
                throw new CustomException("Rejection reason is required");
            }

            // Find existing makeup session proposal
            PropositionDeRattrapage proposition = propositionDeRattrapageRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Makeup session proposal not found with ID: " + id));

            // Validate current status
            if (proposition.getStatus() != Status.SCHEDULED) {
                throw new CustomException("Can only reject SCHEDULED makeup sessions");
            }

            // Update status and reason
            proposition.setStatus(Status.REJECTED);
            proposition.setReason(reason);
            PropositionDeRattrapage savedProposition = propositionDeRattrapageRepository.save(proposition);

            return entityMapper.toPropositionDeRattrapageDTO(savedProposition);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to reject scheduled makeup session with ID: " + id, e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.BrancheDTO;
import com.scheduling.universityschedule_backend.dto.EtudiantDTO;
import com.scheduling.universityschedule_backend.dto.SeanceDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.Branche;
import com.scheduling.universityschedule_backend.model.Etudiant;
import com.scheduling.universityschedule_backend.model.Seance;
import com.scheduling.universityschedule_backend.repository.BrancheRepository;
import com.scheduling.universityschedule_backend.repository.TDRepository;
import com.scheduling.universityschedule_backend.service.BrancheService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Service implementation for branch management.
 * Handles CRUD operations and branch-related functionalities.
 */
@Service
@Transactional
public class BrancheServiceImpl implements BrancheService {

    private final BrancheRepository brancheRepository;
    private final TDRepository tdRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     */
    public BrancheServiceImpl(BrancheRepository brancheRepository,
                              TDRepository tdRepository,
                              EntityMapper entityMapper) {
        this.brancheRepository = brancheRepository;
        this.tdRepository = tdRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    public BrancheDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Branch ID cannot be null");
            }

            // Retrieve branch
            Branche branche = brancheRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Branch not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toBrancheDTO(branche);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve branch with ID: " + id, e);
        }
    }

    @Override
    public List<BrancheDTO> findAll() throws CustomException {
        try {
            // Retrieve all branches
            List<Branche> branches = brancheRepository.findAll();

            // Convert to DTOs (no need to check if list is null - JPA returns empty list)
            return branches.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toBrancheDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all branches", e);
        }
    }

    @Override
    public BrancheDTO create(BrancheDTO brancheDTO) throws CustomException {
        try {
            // Validate input
            if (brancheDTO == null) {
                throw new CustomException("Branch data cannot be null");
            }

            // Check for duplicate ID if provided
            if (brancheDTO.getId() != null && brancheRepository.existsById(brancheDTO.getId())) {
                throw new CustomException("Branch with ID " + brancheDTO.getId() + " already exists");
            }

            // Convert to entity
            Branche branche = entityMapper.toBranche(brancheDTO);

            // Save entity
            Branche savedBranche = brancheRepository.save(branche);

            // Convert back to DTO
            return entityMapper.toBrancheDTO(savedBranche);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to create branch", e);
        }
    }

    @Override
    public BrancheDTO update(Long id, BrancheDTO brancheDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Branch ID cannot be null");
            }

            if (brancheDTO == null) {
                throw new CustomException("Branch data cannot be null");
            }

            // Find existing branch
            Branche existingBranche = brancheRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Branch not found with ID: " + id));

            // Update entity with DTO data
            entityMapper.updateFromDto(brancheDTO, existingBranche);

            // Save updated entity
            Branche updatedBranche = brancheRepository.save(existingBranche);

            // Convert back to DTO
            return entityMapper.toBrancheDTO(updatedBranche);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to update branch with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Branch ID cannot be null");
            }

            // Check if branch exists
            if (!brancheRepository.existsById(id)) {
                throw new CustomException("Branch not found with ID: " + id);
            }

            // Delete branch
            brancheRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete branch with ID: " + id, e);
        }
    }

    @Override
    public List<SeanceDTO> getSchedule(Long branchId) throws CustomException {
        try {
            // Validate input
            if (branchId == null) {
                throw new CustomException("Branch ID cannot be null");
            }

            // Find branch
            Branche branche = brancheRepository.findById(branchId)
                    .orElseThrow(() -> new CustomException("Branch not found with ID: " + branchId));

            // Get sessions from branch - handle null case properly
            List<Seance> seances = branche.getSeances();
            if (seances == null) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return seances.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve schedule for branch with ID: " + branchId, e);
        }
    }

    @Override
    public List<EtudiantDTO> getEtudiants(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Branch ID cannot be null");
            }

            // Check if branch exists
            if (!brancheRepository.existsById(id)) {
                throw new CustomException("Branch not found with ID: " + id);
            }

            // Get students using TD repository
            List<Etudiant> etudiants = tdRepository.findAllEtudiantsByBrancheId(id);

            // JPA repositories typically return empty lists rather than null,
            // but we'll be defensive just in case
            if (etudiants == null) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return etudiants.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toEtudiantDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve students for branch with ID: " + id, e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.EnseignantDTO;
import com.scheduling.universityschedule_backend.dto.PropositionDeRattrapageDTO;
import com.scheduling.universityschedule_backend.dto.SeanceDTO;
import com.scheduling.universityschedule_backend.dto.SignalDTO;
import com.scheduling.universityschedule_backend.dto.TPDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.*;
import com.scheduling.universityschedule_backend.repository.EnseignantRepository;
import com.scheduling.universityschedule_backend.repository.PropositionDeRattrapageRepository;
import com.scheduling.universityschedule_backend.repository.SeanceRepository;
import com.scheduling.universityschedule_backend.service.EnseignantService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.*;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Service implementation for teacher operations.
 * Manages teacher schedules, teaching hours, and communication.
 */
@Service
@Transactional
public class EnseignantServiceImpl implements EnseignantService {

    private final EnseignantRepository enseignantRepository;
    private final SeanceRepository seanceRepository;
    private final EntityMapper entityMapper;
    private final PropositionDeRattrapageRepository propositionDeRattrapageRepository;

    /**
     * Constructor injection for dependencies
     */
    public EnseignantServiceImpl(EnseignantRepository enseignantRepository,
                                 SeanceRepository seanceRepository,
                                 EntityMapper entityMapper,PropositionDeRattrapageRepository propositionDeRattrapageRepository) {
        this.enseignantRepository = enseignantRepository;
        this.seanceRepository = seanceRepository;
        this.entityMapper = entityMapper;
        this.propositionDeRattrapageRepository = propositionDeRattrapageRepository;
    }

    @Override
    public EnseignantDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            // Retrieve teacher
            Enseignant enseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toEnseignantDTO(enseignant);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve teacher with ID: " + id, e);
        }
    }

    @Override
    public List<EnseignantDTO> findAll() throws CustomException {
        try {
            // Retrieve all teachers
            List<Enseignant> enseignants = enseignantRepository.findAll();

            // Convert to DTOs
            return enseignants.stream()
                    .map(entityMapper::toEnseignantDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all teachers", e);
        }
    }

    @Override
    public EnseignantDTO create(EnseignantDTO enseignantDTO) throws CustomException {
        try {
            // Validate input
            if (enseignantDTO == null) {
                throw new CustomException("Teacher data cannot be null");
            }

            // Check for duplicate ID if provided
            if (enseignantDTO.getId() != null && enseignantRepository.existsById(enseignantDTO.getId())) {
                throw new CustomException("Teacher with ID " + enseignantDTO.getId() + " already exists");
            }

            // Convert to entity
            Enseignant enseignant = entityMapper.toEnseignant(enseignantDTO);

            // Save entity
            Enseignant savedEnseignant = enseignantRepository.save(enseignant);

            // Convert back to DTO
            return entityMapper.toEnseignantDTO(savedEnseignant);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to create teacher", e);
        }
    }

    @Override
    public EnseignantDTO update(Long id, EnseignantDTO enseignantDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            if (enseignantDTO == null) {
                throw new CustomException("Teacher data cannot be null");
            }

            // Find existing teacher
            Enseignant existingEnseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Update entity with DTO data
            entityMapper.updateFromDto(enseignantDTO, existingEnseignant);

            // Save updated entity
            Enseignant updatedEnseignant = enseignantRepository.save(existingEnseignant);

            // Convert back to DTO
            return entityMapper.toEnseignantDTO(updatedEnseignant);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to update teacher with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            // Check if teacher exists
            if (!enseignantRepository.existsById(id)) {
                throw new CustomException("Teacher not found with ID: " + id);
            }

            // Delete teacher
            enseignantRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete teacher with ID: " + id, e);
        }
    }

    @Override
    public List<SeanceDTO> getSchedule(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            // Find teacher
            Enseignant enseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Get sessions from teacher - using safe access pattern for collections
            if (enseignant.getSeances() == null) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return enseignant.getSeances().stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve schedule for teacher with ID: " + id, e);
        }
    }
    /**
     * Calculates total teaching hours for a teacher within a specific date range.
     * Weekly sessions count once per week, bi-weekly sessions count as half per week,
     * and makeup sessions with specific dates count only once if within range.
     *
     * @param teacherid Teacher's unique identifier
     * @param startdate Start date for calculation
     * @param enddate End date for calculation
     * @return Total hours taught between start and end date
     * @throws CustomException if calculation fails or dates are invalid
     */
    @Override
    public int getTotalTeachingHours(Long teacherid, LocalDate startdate, LocalDate enddate) throws CustomException {
        try {
            // Validate inputs
            if (teacherid == null || startdate == null || enddate == null) {
                throw new CustomException("Teacher ID and date range cannot be null");
            }

            if (startdate.isAfter(enddate)) {
                throw new CustomException("Start date must be before or equal to end date");
            }

            // Find teacher
            Enseignant enseignant = enseignantRepository.findById(teacherid)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + teacherid));

            // Get all sessions for the teacher
            List<Seance> sessions = enseignant.getSeances();
            if (sessions == null || sessions.isEmpty()) {
                return 0;
            }

            int totalHours = 0;

            // Process each session
            for (Seance seance : sessions) {
                if (seance == null || seance.getFrequence() == null) {
                    continue;
                }

                // Calculate session duration
                int sessionHours = getSessionHours(seance);
                if (sessionHours <= 0) continue;

                // Add hours based on session type
                switch (seance.getFrequence()) {
                    case WEEKLY:
                        totalHours += getWeeklyHours(seance, sessionHours, startdate, enddate);
                        break;

                    case BIWEEKLY:
                        totalHours += getBiweeklyHours(seance, sessionHours, startdate, enddate);
                        break;

                    case CATCHUP:
                        totalHours += getCatchupHours(seance, sessionHours, startdate, enddate);
                        break;
                }
            }

            return totalHours;

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to calculate teaching hours: " + e.getMessage(), e);
        }
    }

    /**
     * Calculates session duration in hours
     */
    private int getSessionHours(Seance seance) {
        try {
            LocalTime start = seance.getHeureDebut();
            LocalTime end = seance.getHeureFin();
            return (int) Math.ceil(Duration.between(start, end).toMinutes() / 60.0);
        } catch (Exception e) {
            return 0;
        }
    }

    /**
     * Calculates hours for weekly sessions
     */
    private int getWeeklyHours(Seance seance, int hours, LocalDate start, LocalDate end) {
        try {
            if (seance.getJour() == null) return 0;

            // Get total weeks when this session occurs
            DayOfWeek day = seance.getJour();
            long weeks = getWeeksWithDay(day, start, end);

            return (int) (weeks * hours);
        } catch (Exception e) {
            return 0;
        }
    }

    /**
     * Calculates hours for bi-weekly sessions
     */
    private int getBiweeklyHours(Seance seance, int hours, LocalDate start, LocalDate end) {
        int weeklyHours = getWeeklyHours(seance, hours, start, end);
        return (int) Math.ceil(weeklyHours / 2.0);
    }

    /**
     * Calculates hours for makeup sessions
     */
    private int getCatchupHours(Seance seance, int hours, LocalDate start, LocalDate end) {
        try {
            if (seance.getDate() == null ) return 0;

            LocalDate sessionDate = seance.getDate();
            return (!sessionDate.isBefore(start) && !sessionDate.isAfter(end)) ? hours : 0;
        } catch (Exception e) {
            return 0;
        }
    }

    /**
     * Counts how many times a specific day of week occurs between two dates
     */
    private long getWeeksWithDay(DayOfWeek day, LocalDate start, LocalDate end) {
        // Adjust start date to first occurrence of the day
        LocalDate current = start;
        while (current.getDayOfWeek() != day) {
            current = current.plusDays(1);
            if (current.isAfter(end)) return 0;
        }

        // Count occurrences
        long count = 0;
        while (!current.isAfter(end)) {
            count++;
            current = current.plusWeeks(1);
        }

        return count;
    }
    /**
     * Submits makeup session request.
     * @param id Teacher's unique identifier
     * @param proposition Makeup session proposal DTO
     * @return Created makeup session proposal DTO
     * @throws CustomException if submission fails
     */
    @Override
    public PropositionDeRattrapageDTO submitMakeupRequest(Long id, PropositionDeRattrapageDTO proposition) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            if (proposition == null) {
                throw new CustomException("Makeup session proposal cannot be null");
            }

            // Find teacher
            Enseignant enseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Convert DTO to entity
            PropositionDeRattrapage propositionEntity = entityMapper.toPropositionDeRattrapage(proposition);

            // Set submission date if not provided
            if (propositionEntity.getDate() == null) {
                propositionEntity.setDate(LocalDateTime.now());
            }

            // Set initial status
            propositionEntity.setStatus(Status.PENDING);

            // Associate proposal with teacher
            propositionEntity.setEnseignant(enseignant);

            // Save the proposition entity
            propositionDeRattrapageRepository.save(propositionEntity);

            // Convert back to DTO
            return entityMapper.toPropositionDeRattrapageDTO(propositionEntity);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to submit makeup session request for teacher with ID: " + id, e);
        }
    }

    /**
     * Submits an issue or suggestion from a teacher.
     * @param id Teacher's unique identifier
     * @param signal Signal DTO containing issue or suggestion
     * @return Created signal DTO
     * @throws CustomException if submission fails
     */
    @Override
    public SignalDTO submitSignal(Long id, SignalDTO signal) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            if (signal == null) {
                throw new CustomException("Signal data cannot be null");
            }

            // Find teacher
            Enseignant enseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Convert DTO to entity
            Signal signalEntity = entityMapper.toSignal(signal);

            // Set submission date if not provided
            if (signalEntity.getTimestamp() == null) {
                signalEntity.setTimestamp(LocalDateTime.now());
            }

            // Associate signal with teacher
            signalEntity.setEnseignant(enseignant);

            // Add signal to teacher's signals collection (if using bidirectional relationship)
            if (enseignant.getSignals() == null) {
                enseignant.setSignals(new ArrayList<>());
            }
            enseignant.getSignals().add(signalEntity);

            // Save teacher to persist the relationship
            enseignantRepository.save(enseignant);

            // Convert back to DTO
            return entityMapper.toSignalDTO(signalEntity);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to submit signal for teacher with ID: " + id, e);
        }
    }

    @Override
    public List<SignalDTO> getSignals(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            // Find teacher
            Enseignant enseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Get signals from teacher - using safe access pattern for collections
            if (enseignant.getSignals() == null) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return enseignant.getSignals().stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSignalDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve signals for teacher with ID: " + id, e);
        }
    }

    // EnseignantServiceImpl.java
    /**
     * Retrieves all subjects taught by a specific teacher.
     * @param id Teacher's unique identifier
     * @return List of subject names taught by the teacher
     * @throws CustomException if retrieval fails or teacher doesn't exist
     */
    @Override
    public List<String> getSubjects(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            // Find teacher
            Enseignant enseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Get unique subjects from teacher's sessions
            if (enseignant.getSeances() == null) {
                return Collections.emptyList();
            }

            return enseignant.getSeances().stream()
                    .filter(Objects::nonNull)
                    .map(Seance::getMatiere)  // Get subject field from each session
                    .filter(Objects::nonNull)
                    .filter(matiere -> !matiere.trim().isEmpty())
                    .distinct()  // Remove duplicates
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve subjects for teacher with ID: " + id, e);
        }
    }

    /**
     * Retrieves all practical groups (TPs) taught by a specific teacher.
     * @param id Teacher's unique identifier
     * @return List of practical groups (TPs) taught by the teacher
     * @throws CustomException if retrieval fails or teacher doesn't exist
     */
    @Override
    public List<TPDTO> getStudentGroups(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Teacher ID cannot be null");
            }

            // Find teacher
            Enseignant enseignant = enseignantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Teacher not found with ID: " + id));

            // Get sessions taught by this teacher
            List<Seance> teacherSeances = enseignant.getSeances();
            if (teacherSeances == null || teacherSeances.isEmpty()) {
                return Collections.emptyList();
            }

            // Extract unique TPs from sessions
            Set<TP> uniqueTPs = new HashSet<>();
            for (Seance seance : teacherSeances) {
                if (seance.getTps() != null) {
                    uniqueTPs.addAll(seance.getTps());
                }
            }

            // Convert to DTOs
            return uniqueTPs.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toTPDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve student groups for teacher with ID: " + id, e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.EtudiantDTO;
import com.scheduling.universityschedule_backend.dto.NotificationDTO;
import com.scheduling.universityschedule_backend.dto.SeanceDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.Etudiant;
import com.scheduling.universityschedule_backend.model.Seance;
import com.scheduling.universityschedule_backend.model.TD;
import com.scheduling.universityschedule_backend.repository.EtudiantRepository;
import com.scheduling.universityschedule_backend.repository.NotificationRepository;
import com.scheduling.universityschedule_backend.service.EtudiantService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Service implementation for student operations.
 * Handles CRUD operations and student-related functionalities.
 */
@Service
@Transactional
public class EtudiantServiceImpl implements EtudiantService {

    private final EtudiantRepository etudiantRepository;
    private final NotificationRepository notificationRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     */
    public EtudiantServiceImpl(EtudiantRepository etudiantRepository,
                               NotificationRepository notificationRepository,
                               EntityMapper entityMapper) {
        this.etudiantRepository = etudiantRepository;
        this.notificationRepository = notificationRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    public EtudiantDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Student ID cannot be null");
            }

            // Retrieve student
            Etudiant etudiant = etudiantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Student not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toEtudiantDTO(etudiant);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve student with ID: " + id, e);
        }
    }

    @Override
    public List<EtudiantDTO> findAll() throws CustomException {
        try {
            // Retrieve all students
            List<Etudiant> etudiants = etudiantRepository.findAll();

            // Convert to DTOs (JPA repositories typically return empty lists rather than null)
            return etudiants.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toEtudiantDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all students", e);
        }
    }

    @Override
    public EtudiantDTO create(EtudiantDTO etudiantDTO) throws CustomException {
        try {
            // Validate input
            if (etudiantDTO == null) {
                throw new CustomException("Student data cannot be null");
            }

            // Check for duplicate ID if provided
            if (etudiantDTO.getId() != null && etudiantRepository.existsById(etudiantDTO.getId())) {
                throw new CustomException("Student with ID " + etudiantDTO.getId() + " already exists");
            }

            // Convert to entity
            Etudiant etudiant = entityMapper.toEtudiant(etudiantDTO);

            // Save entity
            Etudiant savedEtudiant = etudiantRepository.save(etudiant);

            // Convert back to DTO
            return entityMapper.toEtudiantDTO(savedEtudiant);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to create student", e);
        }
    }

    @Override
    public EtudiantDTO update(Long id, EtudiantDTO etudiantDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Student ID cannot be null");
            }

            if (etudiantDTO == null) {
                throw new CustomException("Student data cannot be null");
            }

            // Find existing student
            Etudiant existingEtudiant = etudiantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Student not found with ID: " + id));

            // Update entity with DTO data
            entityMapper.updateFromDto(etudiantDTO, existingEtudiant);

            // Save updated entity
            Etudiant updatedEtudiant = etudiantRepository.save(existingEtudiant);

            // Convert back to DTO
            return entityMapper.toEtudiantDTO(updatedEtudiant);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to update student with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Student ID cannot be null");
            }

            // Check if student exists
            if (!etudiantRepository.existsById(id)) {
                throw new CustomException("Student not found with ID: " + id);
            }

            // Delete student
            etudiantRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete student with ID: " + id, e);
        }
    }

    @Override
    public List<SeanceDTO> getPersonalSchedule(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Student ID cannot be null");
            }

            // Find student
            Etudiant etudiant = etudiantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Student not found with ID: " + id));

            // Check if student is assigned to a practical group
            if (etudiant.getTp() == null) {
                throw new CustomException("Student with ID: " + id + " is not assigned to any practical group (TP)");
            }

            // Get sessions from TP
            if (etudiant.getTp().getSeances() == null) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return etudiant.getTp().getSeances().stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve personal schedule for student with ID: " + id, e);
        }
    }

    // EtudiantServiceImpl.java
    /**
     * Retrieves schedule for a student's tutorial group (TD).
     * @param id Student's unique identifier
     * @return List of scheduled sessions for TD
     * @throws CustomException if schedule retrieval fails
     */
    @Override
    public List<SeanceDTO> getTDSchedule(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Student ID cannot be null");
            }

            // Find student
            Etudiant etudiant = etudiantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Student not found with ID: " + id));

            // Get student's TP
            if (etudiant.getTp() == null) {
                throw new CustomException("Student with ID: " + id + " is not assigned to any practical group (TP)");
            }

            // Get student's TD through TP
            TD td = etudiant.getTp().getTd();
            if (td == null) {
                throw new CustomException("Student's practical group is not associated with any tutorial group (TD)");
            }

            // Get TD sessions
            List<Seance> tdSessions = td.getSeances();
            if (tdSessions == null) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return tdSessions.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve TD schedule for student with ID: " + id, e);
        }
    }
    // EtudiantServiceImpl.java
    /**
     * Retrieves schedule for a specific branch.
     * @param id Student's unique identifier
     * @return List of scheduled sessions for branch
     * @throws CustomException if schedule retrieval fails
     */
    @Override
    public List<SeanceDTO> getBranchSchedule(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Student ID cannot be null");
            }

            // Find student
            Etudiant etudiant = etudiantRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Student not found with ID: " + id));

            // Get student's branch
            if (etudiant.getBranche() == null) {
                throw new CustomException("Student with ID: " + id + " is not assigned to any branch");
            }

            // Get branch sessions
            List<Seance> branchSessions = etudiant.getBranche().getSeances();
            if (branchSessions == null) {
                return Collections.emptyList();
            }

            // Convert to DTOs
            return branchSessions.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve branch schedule for student with ID: " + id, e);
        }
    }

    @Override
    public List<NotificationDTO> getNotifications(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Student ID cannot be null");
            }

            // Check if student exists
            if (!etudiantRepository.existsById(id)) {
                throw new CustomException("Student not found with ID: " + id);
            }

            // Get notifications for student

            return notificationRepository.findAllByPersonneId(id).stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toNotificationDTO)
                    .collect(Collectors.toList());
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve notifications for student with ID: " + id, e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.FichierExcelDTO;
import com.scheduling.universityschedule_backend.dto.SeanceDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.FichierExcel;
import com.scheduling.universityschedule_backend.model.Seance;
import com.scheduling.universityschedule_backend.repository.FichierExcelRepository;
import com.scheduling.universityschedule_backend.repository.SeanceRepository;
import com.scheduling.universityschedule_backend.service.ExcelFileService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Service implementation for Excel file operations.
 * Handles file uploads, processing, and history tracking.
 */
@Service
@Transactional
public class ExcelFileServiceImpl implements ExcelFileService {

    /**
     * File status constants
     */
    private static final String STATUS_PROCESSING = "Processing";
    private static final String STATUS_COMPLETED = "Completed";
    private static final String STATUS_FAILED = "Failed";

    private final FichierExcelRepository fichierExcelRepository;
    private final SeanceRepository seanceRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     */
    public ExcelFileServiceImpl(FichierExcelRepository fichierExcelRepository,
                                SeanceRepository seanceRepository,
                                EntityMapper entityMapper) {
        this.fichierExcelRepository = fichierExcelRepository;
        this.seanceRepository = seanceRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    public FichierExcelDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("File ID cannot be null");
            }

            // Retrieve file
            FichierExcel fichierExcel = fichierExcelRepository.findById(id)
                    .orElseThrow(() -> new CustomException("File not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toFichierExcelDTO(fichierExcel);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve file with ID: " + id, e);
        }
    }

    @Override
    public List<FichierExcelDTO> findAll() throws CustomException {
        try {
            // Retrieve all files
            List<FichierExcel> fichiersExcel = fichierExcelRepository.findAll();

            // Convert to DTOs (JPA repositories typically return empty lists rather than null)
            return fichiersExcel.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toFichierExcelDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all files", e);
        }
    }

    @Override
    public FichierExcelDTO create(FichierExcelDTO fichierExcelDTO) throws CustomException {
        try {
            // Validate input
            if (fichierExcelDTO == null) {
                throw new CustomException("File data cannot be null");
            }

            // Check for duplicate ID if provided
            if (fichierExcelDTO.getId() != null && fichierExcelRepository.existsById(fichierExcelDTO.getId())) {
                throw new CustomException("File with ID " + fichierExcelDTO.getId() + " already exists");
            }

            // Convert to entity
            FichierExcel fichierExcel = entityMapper.toFichierExcel(fichierExcelDTO);

            // Save entity
            FichierExcel savedFichierExcel = fichierExcelRepository.save(fichierExcel);

            // Convert back to DTO
            return entityMapper.toFichierExcelDTO(savedFichierExcel);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to create file", e);
        }
    }

    @Override
    public FichierExcelDTO update(Long id, FichierExcelDTO fichierExcelDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("File ID cannot be null");
            }

            if (fichierExcelDTO == null) {
                throw new CustomException("File data cannot be null");
            }

            // Find existing file
            FichierExcel existingFichierExcel = fichierExcelRepository.findById(id)
                    .orElseThrow(() -> new CustomException("File not found with ID: " + id));

            // Update entity with DTO data
            entityMapper.updateFromDto(fichierExcelDTO, existingFichierExcel);

            // Save updated entity
            FichierExcel updatedFichierExcel = fichierExcelRepository.save(existingFichierExcel);

            // Convert back to DTO
            return entityMapper.toFichierExcelDTO(updatedFichierExcel);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to update file with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("File ID cannot be null");
            }

            // Check if file exists
            if (!fichierExcelRepository.existsById(id)) {
                throw new CustomException("File not found with ID: " + id);
            }

            // Delete file
            fichierExcelRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete file with ID: " + id, e);
        }
    }

    @Override
    public void upload(FichierExcelDTO file, List<SeanceDTO> seanceDTOS) throws CustomException {
        FichierExcel fichierExcel = null;

        try {
            // Validate inputs
            if (file == null) {
                throw new CustomException("File data cannot be null");
            }

            if (seanceDTOS == null) {
                throw new CustomException("Sessions data cannot be null");
            }

            // Convert file to entity
            fichierExcel = entityMapper.toFichierExcel(file);

            // Set import date and initial status
            fichierExcel.setImportDate(LocalDateTime.now());
            fichierExcel.setStatus(STATUS_PROCESSING);

            // Save file with initial status
            fichierExcelRepository.save(fichierExcel);

            // Convert and save sessions
            List<Seance> seances = seanceDTOS.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeance)
                    .collect(Collectors.toList());

            seanceRepository.saveAll(seances);

            // Update file status to completed
            fichierExcel.setStatus(STATUS_COMPLETED);
            fichierExcelRepository.save(fichierExcel);
        } catch (Exception e) {
            // Update file status to failed if an error occurs
            if (fichierExcel != null) {
                try {
                    fichierExcel.setStatus(STATUS_FAILED);
                    fichierExcelRepository.save(fichierExcel);
                } catch (Exception saveException) {
                    // Log this exception but don't throw it, we want to throw the original exception
                    System.err.println("Failed to update file status to FAILED: " + saveException.getMessage());
                }
            }

            // Throw the original exception
            if (e instanceof CustomException) {
                throw (CustomException) e;
            } else {
                throw new CustomException("Failed to upload and process file", e);
            }
        }
    }

    @Override
    public List<FichierExcelDTO> getImportHistory() throws CustomException {
        try {
            // Reuse findAll method since they do the same thing
            return findAll();
        } catch (CustomException e) {
            // Just change the error message to be more specific to this operation
            throw new CustomException("Failed to retrieve import history", e.getCause());
        }
    }
}
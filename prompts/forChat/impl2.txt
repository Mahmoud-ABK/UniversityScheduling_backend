package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.*;
import com.scheduling.universityschedule_backend.repository.*;
import com.scheduling.universityschedule_backend.service.NotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Service implementation for notification operations.
 * Handles notification creation, updates, and various distribution methods.
 */
@Service
@Transactional
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository notificationRepository;
    private final EntityMapper entityMapper;
    @Autowired
    private PersonneRepository personneRepository;
    @Autowired
    private EtudiantRepository etudiantRepository;
    @Autowired
    private EnseignantRepository enseignantRepository;
    @Autowired
    private TDRepository tdRepository;

    /**
     * Constructor injection for dependencies
     */
    public NotificationServiceImpl(NotificationRepository notificationRepository,
                                   EntityMapper entityMapper) {
        this.notificationRepository = notificationRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    public NotificationDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Notification ID cannot be null");
            }

            // Retrieve notification
            Notification notification = notificationRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Notification not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toNotificationDTO(notification);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve notification with ID: " + id, e);
        }
    }

    @Override
    public List<NotificationDTO> findAll() throws CustomException {
        try {
            // Retrieve all notifications
            List<Notification> notifications = notificationRepository.findAll();

            // Convert to DTOs (JPA repositories typically return empty lists rather than null)
            return notifications.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toNotificationDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all notifications", e);
        }
    }

    @Override
    public NotificationDTO create(NotificationDTO notificationDTO) throws CustomException {
        try {
            // Validate input
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            // Check for duplicate ID if provided
            if (notificationDTO.getId() != null && notificationRepository.existsById(notificationDTO.getId())) {
                throw new CustomException("Notification with ID " + notificationDTO.getId() + " already exists");
            }

            // Convert to entity
            Notification notification = entityMapper.toNotification(notificationDTO);

            // Save entity
            Notification savedNotification = notificationRepository.save(notification);

            // Convert back to DTO
            return entityMapper.toNotificationDTO(savedNotification);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to create notification", e);
        }
    }

    @Override
    public NotificationDTO update(Long id, NotificationDTO notificationDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Notification ID cannot be null");
            }

            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            // Find existing notification
            Notification existingNotification = notificationRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Notification not found with ID: " + id));

            // Update entity with DTO data
            entityMapper.updateFromDto(notificationDTO, existingNotification);

            // Save updated entity
            Notification updatedNotification = notificationRepository.save(existingNotification);

            // Convert back to DTO
            return entityMapper.toNotificationDTO(updatedNotification);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to update notification with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Notification ID cannot be null");
            }

            // Check if notification exists
            if (!notificationRepository.existsById(id)) {
                throw new CustomException("Notification not found with ID: " + id);
            }

            // Delete notification
            notificationRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete notification with ID: " + id, e);
        }
    }

    @Override
    public void markAsRead(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Notification ID cannot be null");
            }

            // Find notification
            Notification notification = notificationRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Notification not found with ID: " + id));

            // Check if already read (skip update if already marked as read)
            if (Boolean.TRUE.equals(notification.getIsread())) {
                return; // Already read, no need to update
            }

            // Mark as read
            notification.setIsread(true);

            // Save updated notification
            notificationRepository.save(notification);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to mark notification as read: " + id, e);
        }
    }
    @Override
    public List<NotificationDTO> getUnreadNotifications() throws CustomException {
        try {
            // Retrieve unread notifications
            List<Notification> unreadNotifications = notificationRepository.findByIsreadFalse();

            // Convert to DTOs (JPA repositories typically return empty lists rather than null)
            return unreadNotifications.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toNotificationDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve unread notifications", e);
        }
    }

    @Override
    public void broadcastNotification(NotificationDTO notificationDTO) throws CustomException {
        try {
            // Validate input
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            // Validate message content
            if (notificationDTO.getMessage() == null || notificationDTO.getMessage().trim().isEmpty()) {
                throw new CustomException("Notification message cannot be empty");
            }

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("BROADCAST");

            // Get all users (Personne entities) using repository
            List<Personne> allUsers = personneRepository.findAll();

            // Create and save individual notifications for each user
            List<Notification> notifications = allUsers.stream()
                    .filter(Objects::nonNull)
                    .map(user -> {
                        Notification notification = new Notification();
                        notification.setMessage(baseNotification.getMessage());
                        notification.setDate(baseNotification.getDate());
                        notification.setType(baseNotification.getType());
                        notification.setIsread(false);
                        notification.setRecepteur(user);
                        notification.setExpediteur(baseNotification.getExpediteur());
                        return notification;
                    })
                    .collect(Collectors.toList());

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to broadcast notification: " + e.getMessage(), e);
        }
    }

    @Override
    public void sendNotificationToTeachers(NotificationDTO notificationDTO) throws CustomException {
        try {
            // Validate input
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            // Validate message content
            if (notificationDTO.getMessage() == null || notificationDTO.getMessage().trim().isEmpty()) {
                throw new CustomException("Notification message cannot be empty");
            }

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("TEACHER_BROADCAST");

            // Get all teachers using repository
            List<Enseignant> allTeachers = enseignantRepository.findAll();

            // Create and save individual notifications for each teacher
            List<Notification> notifications = allTeachers.stream()
                    .filter(Objects::nonNull)
                    .map(teacher -> {
                        Notification notification = new Notification();
                        notification.setMessage(baseNotification.getMessage());
                        notification.setDate(baseNotification.getDate());
                        notification.setType(baseNotification.getType());
                        notification.setIsread(false);
                        notification.setRecepteur(teacher);
                        notification.setExpediteur(baseNotification.getExpediteur());
                        return notification;
                    })
                    .collect(Collectors.toList());

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notification to teachers: " + e.getMessage(), e);
        }
    }

    @Override
    public void sendNotificationToStudents(NotificationDTO notificationDTO) throws CustomException {
        try {
            // Validate input
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            // Validate message content
            if (notificationDTO.getMessage() == null || notificationDTO.getMessage().trim().isEmpty()) {
                throw new CustomException("Notification message cannot be empty");
            }

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("STUDENT_BROADCAST");

            // Get all students using repository
            List<Etudiant> allStudents = etudiantRepository.findAll();

            // Create and save individual notifications for each student
            List<Notification> notifications = allStudents.stream()
                    .filter(Objects::nonNull)
                    .map(student -> {
                        Notification notification = new Notification();
                        notification.setMessage(baseNotification.getMessage());
                        notification.setDate(baseNotification.getDate());
                        notification.setType(baseNotification.getType());
                        notification.setIsread(false);
                        notification.setRecepteur(student);
                        notification.setExpediteur(baseNotification.getExpediteur());
                        return notification;
                    })
                    .collect(Collectors.toList());

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notification to students: " + e.getMessage(), e);
        }
    }
    @Override
    public void sendNotificationToBranches(NotificationDTO notificationDTO, List<BrancheDTO> brancheDTOS) throws CustomException {
        try {
            // Validate inputs
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            if (brancheDTOS == null || brancheDTOS.isEmpty()) {
                throw new CustomException("Branch list cannot be null or empty");
            }

            // Convert branch DTOs to entities
            List<Branche> branches = brancheDTOS.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toBranche)
                    .toList();

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("BRANCH_NOTIFICATION");

            // Get all students from these branches using repository
            List<Notification> notifications = new ArrayList<>();

            // For each branch, get its TDs and their students
            for (Branche branch : branches) {
                List<TD> tds = tdRepository.getAllTDbyBrancheId(branch.getId());
                for (TD td : tds) {
                    if (td.getTpList() != null) {
                        for (TP tp : td.getTpList()) {
                            if (tp.getEtudiants() != null) {
                                for (Etudiant student : tp.getEtudiants()) {
                                    Notification notification = new Notification();
                                    notification.setMessage(baseNotification.getMessage());
                                    notification.setDate(baseNotification.getDate());
                                    notification.setType(baseNotification.getType());
                                    notification.setIsread(false);
                                    notification.setRecepteur(student);
                                    notification.setExpediteur(baseNotification.getExpediteur());
                                    notifications.add(notification);
                                }
                            }
                        }
                    }
                }
            }

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notifications to branches: " + e.getMessage(), e);
        }
    }

    @Override
    public void sendNotificationToBranche(NotificationDTO notificationDTO, BrancheDTO brancheDTO) throws CustomException {
        try {
            // Validate inputs
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            if (brancheDTO == null) {
                throw new CustomException("Branch data cannot be null");
            }

            // Convert branch DTO to entity
            Branche branch = entityMapper.toBranche(brancheDTO);

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("SINGLE_BRANCH_NOTIFICATION");

            // Get all students from this branch using repository
            List<TD> tds = tdRepository.getAllTDbyBrancheId(branch.getId());
            List<Notification> notifications = new ArrayList<>();

            // For each TD, get its TPs and their students
            for (TD td : tds) {
                if (td.getTpList() != null) {
                    for (TP tp : td.getTpList()) {
                        if (tp.getEtudiants() != null) {
                            for (Etudiant student : tp.getEtudiants()) {
                                Notification notification = new Notification();
                                notification.setMessage(baseNotification.getMessage());
                                notification.setDate(baseNotification.getDate());
                                notification.setType(baseNotification.getType());
                                notification.setIsread(false);
                                notification.setRecepteur(student);
                                notification.setExpediteur(baseNotification.getExpediteur());
                                notifications.add(notification);
                            }
                        }
                    }
                }
            }

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notification to branch: " + e.getMessage(), e);
        }
    }

    @Override
    public void sendNotificationToTDs(NotificationDTO notificationDTO, List<TDDTO> tddtos) throws CustomException {
        try {
            // Validate inputs
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            if (tddtos == null || tddtos.isEmpty()) {
                throw new CustomException("Tutorial groups list cannot be null or empty");
            }

            // Convert TD DTOs to entities
            List<TD> tds = tddtos.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toTD)
                    .toList();

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("TD_GROUP_NOTIFICATION");

            List<Notification> notifications = new ArrayList<>();

            // For each TD, get its TPs and their students
            for (TD td : tds) {
                if (td.getTpList() != null) {
                    for (TP tp : td.getTpList()) {
                        if (tp.getEtudiants() != null) {
                            for (Etudiant student : tp.getEtudiants()) {
                                Notification notification = new Notification();
                                notification.setMessage(baseNotification.getMessage());
                                notification.setDate(baseNotification.getDate());
                                notification.setType(baseNotification.getType());
                                notification.setIsread(false);
                                notification.setRecepteur(student);
                                notification.setExpediteur(baseNotification.getExpediteur());
                                notifications.add(notification);
                            }
                        }
                    }
                }
            }

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notifications to tutorial groups: " + e.getMessage(), e);
        }
    }

    @Override
    public void sendNotificationToTD(NotificationDTO notificationDTO, TDDTO tddto) throws CustomException {
        try {
            // Validate inputs
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            if (tddto == null) {
                throw new CustomException("Tutorial group data cannot be null");
            }

            // Convert TD DTO to entity
            TD td = entityMapper.toTD(tddto);

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("SINGLE_TD_NOTIFICATION");

            List<Notification> notifications = new ArrayList<>();

            // Get all students from TPs in this TD
            if (td.getTpList() != null) {
                for (TP tp : td.getTpList()) {
                    if (tp.getEtudiants() != null) {
                        for (Etudiant student : tp.getEtudiants()) {
                            Notification notification = new Notification();
                            notification.setMessage(baseNotification.getMessage());
                            notification.setDate(baseNotification.getDate());
                            notification.setType(baseNotification.getType());
                            notification.setIsread(false);
                            notification.setRecepteur(student);
                            notification.setExpediteur(baseNotification.getExpediteur());
                            notifications.add(notification);
                        }
                    }
                }
            }

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notification to tutorial group: " + e.getMessage(), e);
        }
    }
    @Override
    public void sendNotificationToTPs(NotificationDTO notificationDTO, List<TPDTO> tpdtos) throws CustomException {
        try {
            // Validate inputs
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            if (tpdtos == null || tpdtos.isEmpty()) {
                throw new CustomException("Practical groups list cannot be null or empty");
            }

            // Convert TP DTOs to entities for processing
            List<TP> tps = tpdtos.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toTP)
                    .toList();

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("TP_GROUP_NOTIFICATION");

            List<Notification> notifications = new ArrayList<>();

            // For each TP, create notifications for its students
            for (TP tp : tps) {
                if (tp.getEtudiants() != null) {
                    for (Etudiant student : tp.getEtudiants()) {
                        Notification notification = new Notification();
                        notification.setMessage(baseNotification.getMessage());
                        notification.setDate(baseNotification.getDate());
                        notification.setType(baseNotification.getType());
                        notification.setIsread(false);
                        notification.setRecepteur(student);
                        notification.setExpediteur(baseNotification.getExpediteur());
                        notifications.add(notification);
                    }
                }
            }

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notifications to practical groups: " + e.getMessage(), e);
        }
    }

    @Override
    public void sendNotificationToTP(NotificationDTO notificationDTO, TPDTO tpdto) throws CustomException {
        try {
            // Validate inputs
            if (notificationDTO == null) {
                throw new CustomException("Notification data cannot be null");
            }

            if (tpdto == null) {
                throw new CustomException("Practical group data cannot be null");
            }

            // Convert TP DTO to entity
            TP tp = entityMapper.toTP(tpdto);

            // Create base notification
            Notification baseNotification = entityMapper.toNotification(notificationDTO);
            baseNotification.setDate(LocalDateTime.now());
            baseNotification.setIsread(false);
            baseNotification.setType("SINGLE_TP_NOTIFICATION");

            List<Notification> notifications = new ArrayList<>();

            // Create notifications for all students in the TP
            if (tp.getEtudiants() != null) {
                for (Etudiant student : tp.getEtudiants()) {
                    Notification notification = new Notification();
                    notification.setMessage(baseNotification.getMessage());
                    notification.setDate(baseNotification.getDate());
                    notification.setType(baseNotification.getType());
                    notification.setIsread(false);
                    notification.setRecepteur(student);
                    notification.setExpediteur(baseNotification.getExpediteur());
                    notifications.add(notification);
                }
            }

            // Save all notifications in batch
            notificationRepository.saveAll(notifications);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to send notification to practical group: " + e.getMessage(), e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.SalleDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.Salle;
import com.scheduling.universityschedule_backend.repository.SalleRepository;
import com.scheduling.universityschedule_backend.service.SalleService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Service implementation for room management.
 * Handles room creation, updates, and availability checking.
 */
@Service
@Transactional
public class SalleServiceImpl implements SalleService {

    private final SalleRepository salleRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     */
    public SalleServiceImpl(SalleRepository salleRepository,
                            EntityMapper entityMapper) {
        this.salleRepository = salleRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    public SalleDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Room ID cannot be null");
            }

            // Retrieve room
            Salle salle = salleRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Room not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toSalleDTO(salle);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve room with ID: " + id, e);
        }
    }

    @Override
    public List<SalleDTO> findAll() throws CustomException {
        try {
            // Retrieve all rooms
            List<Salle> salles = salleRepository.findAll();

            // Convert to DTOs
            return salles.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSalleDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all rooms", e);
        }
    }

    @Override
    public SalleDTO create(SalleDTO salleDTO) throws CustomException {
        try {
            // Validate input
            if (salleDTO == null) {
                throw new CustomException("Room data cannot be null");
            }

            // Check for duplicate ID if provided
            if (salleDTO.getId() != null && salleRepository.existsById(salleDTO.getId())) {
                throw new CustomException("Room with ID " + salleDTO.getId() + " already exists");
            }

            // Convert to entity
            Salle salle = entityMapper.toSalle(salleDTO);

            // Save entity
            Salle savedSalle = salleRepository.save(salle);

            // Convert back to DTO
            return entityMapper.toSalleDTO(savedSalle);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to create room", e);
        }
    }

    @Override
    public SalleDTO update(Long id, SalleDTO salleDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Room ID cannot be null");
            }

            if (salleDTO == null) {
                throw new CustomException("Room data cannot be null");
            }

            // Find existing room
            Salle existingSalle = salleRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Room not found with ID: " + id));

            // Update entity with DTO data
            entityMapper.updateFromDto(salleDTO, existingSalle);

            // Save updated entity
            Salle updatedSalle = salleRepository.save(existingSalle);

            // Convert back to DTO
            return entityMapper.toSalleDTO(updatedSalle);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to update room with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Room ID cannot be null");
            }

            // Check if room exists
            if (!salleRepository.existsById(id)) {
                throw new CustomException("Room not found with ID: " + id);
            }

            // Delete room
            salleRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete room with ID: " + id, e);
        }
    }

    @Override
    public List<SalleDTO> getAvailableRooms(LocalDate date, DayOfWeek day, LocalTime startTime, LocalTime endTime) throws CustomException {
        try {
            // Input validation
            if (day == null) {
                throw new CustomException("Day of week cannot be null");
            }
            if (startTime == null || endTime == null) {
                throw new CustomException("Start time and end time cannot be null");
            }
            if (startTime.isAfter(endTime) || startTime.equals(endTime)) {
                throw new CustomException("Start time must be before end time");
            }

            // For catch-up sessions (which require a specific date)
            // the date parameter is optional for regular sessions

            // Use the repository's custom query method that already handles the logic efficiently
            List<Salle> availableRooms = salleRepository.findAvailableRooms(day, startTime, endTime, date);

            // Transform to DTOs
            return availableRooms.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSalleDTO)
                    .collect(Collectors.toList());

        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (DateTimeParseException e) {
            throw new CustomException("Invalid date/time format: " + e.getMessage(), e);
        } catch (Exception e) {
            throw new CustomException("Failed to find available rooms: " + e.getMessage(), e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.SeanceDTO;
import com.scheduling.universityschedule_backend.dto.SeanceConflictDTO;
import com.scheduling.universityschedule_backend.dto.SeanceRoomConflictDTO;
import com.scheduling.universityschedule_backend.dto.SingleSeanceConflictDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.Seance;
import com.scheduling.universityschedule_backend.model.FrequenceType;
import com.scheduling.universityschedule_backend.repository.SeanceRepository;
import com.scheduling.universityschedule_backend.service.SeanceService;
import com.scheduling.universityschedule_backend.util.CustomLogger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Service implementation for session operations.
 * Handles session creation, scheduling, conflict detection, and related operations.
 */
@Service
@Transactional
public class SeanceServiceImpl implements SeanceService {

    /**
     * Frequency type constants
     */
    private static final FrequenceType BIWEEKLY = FrequenceType.BIWEEKLY;
    private static final FrequenceType CATCHUP = FrequenceType.CATCHUP;
    private static final FrequenceType WEEKLY = FrequenceType.WEEKLY;

    private final SeanceRepository seanceRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     */
    public SeanceServiceImpl(SeanceRepository seanceRepository,
                             EntityMapper entityMapper) {
        this.seanceRepository = seanceRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    public SeanceDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Session ID cannot be null");
            }

            // Retrieve session
            Seance seance = seanceRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Session not found with ID: " + id));

            // Convert to DTO
            return entityMapper.toSeanceDTO(seance);
        } catch (CustomException e) {
            throw e; // Rethrow custom exceptions as-is
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve session with ID: " + id, e);
        }
    }

    @Override
    public List<SeanceDTO> findAll() throws CustomException {
        try {
            // Retrieve all sessions
            List<Seance> seances = seanceRepository.findAll();

            // Convert to DTOs
            return seances.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all sessions", e);
        }
    }

    @Override
    public SeanceDTO create(SeanceDTO seanceDTO) throws CustomException {
        try {
            // Validate input
            if (seanceDTO == null) {
                throw new CustomException("Session data cannot be null");
            }

            // Note: We're allowing creation even with conflicts as per instructions

            // Convert DTO to entity
            Seance seance = entityMapper.toSeance(seanceDTO);

            // Save entity
            Seance savedSeance = seanceRepository.save(seance);

            // Convert back to DTO
            return entityMapper.toSeanceDTO(savedSeance);
        } catch (DateTimeParseException e) {
            throw new CustomException("Invalid date/time format: " + e.getMessage(), e);
        } catch (Exception e) {
            throw new CustomException("Failed to create session: " + e.getMessage(), e);
        }
    }

    @Override
    public SeanceDTO update(Long id, SeanceDTO seanceDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                throw new CustomException("Session ID cannot be null");
            }

            if (seanceDTO == null) {
                throw new CustomException("Session data cannot be null");
            }

            // Find existing session
            Seance existingSeance = seanceRepository.findById(id)
                    .orElseThrow(() -> new CustomException("Session not found with ID: " + id));

            // Note: We're allowing updates even with conflicts as per instructions

            // Set ID in DTO to ensure we're updating the right entity
            seanceDTO.setId(id);

            // Update entity
            entityMapper.updateFromDto(seanceDTO, existingSeance);

            // Save updated entity
            Seance updatedSeance = seanceRepository.save(existingSeance);

            // Convert back to DTO
            return entityMapper.toSeanceDTO(updatedSeance);
        } catch (CustomException e) {
            throw e;
        } catch (DateTimeParseException e) {
            throw new CustomException("Invalid date/time format: " + e.getMessage(), e);
        } catch (Exception e) {
            throw new CustomException("Failed to update session with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                throw new CustomException("Session ID cannot be null");
            }

            // Check if session exists
            if (!seanceRepository.existsById(id)) {
                throw new CustomException("Session not found with ID: " + id);
            }

            // Delete session
            seanceRepository.deleteById(id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to delete session with ID: " + id, e);
        }
    }

    @Override
    public List<SeanceConflictDTO> getAllConflicts() throws CustomException {
        try {
            // Directly call repository method to find all conflicts
            List<Object[]> conflicts = seanceRepository.findConflictingSeancePairs(BIWEEKLY, CATCHUP);

            // Map conflicts to DTOs
            return entityMapper.toSeanceConflictDTOList(conflicts);
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve all session conflicts", e);
        }
    }

    @Override
    public List<SeanceRoomConflictDTO> getRoomConflicts() throws CustomException {
        try {
            // Directly call repository method to find room conflicts
            List<Object[]> conflicts = seanceRepository.findConflictingByRooms(BIWEEKLY, CATCHUP);

            // Map conflicts to DTOs
            return entityMapper.toSeanceRoomConflictDTOList(conflicts);
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve room conflicts", e);
        }
    }

    @Override
    public List<SingleSeanceConflictDTO> getConflictsForSession(Long seanceId) throws CustomException {
        try {
            // Validate input
            if (seanceId == null) {
                throw new CustomException("Session ID cannot be null");
            }

            // Directly call repository method to find conflicts for specific session
            List<Object[]> conflicts = seanceRepository.findRoomConflictsForSeanceById(seanceId, BIWEEKLY, CATCHUP);

            // Map conflicts to DTOs
            return entityMapper.toSingleSeanceConflictDTOList(conflicts);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to retrieve conflicts for session with ID: " + seanceId, e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<SingleSeanceConflictDTO> getConflictsForSession(SeanceDTO seanceDTO) throws CustomException {
        try {

            // Validate input
            if (seanceDTO == null) {
                throw new CustomException("Session data cannot be null");
            }

            // Initialize variables with default values
            LocalTime startTime = null;
            LocalTime endTime = null;
            DayOfWeek dayOfWeek = null;
            FrequenceType frequenceType = FrequenceType.WEEKLY; // Default value
            LocalDate date = null;

            // Parse time with validation
            try {
                if (seanceDTO.getHeureDebut() != null) {
                    startTime = LocalTime.parse(seanceDTO.getHeureDebut());
                }
                if (seanceDTO.getHeureFin() != null) {
                    endTime = LocalTime.parse(seanceDTO.getHeureFin());
                }
            } catch (DateTimeParseException e) {
                throw new CustomException("Invalid time format: " + e.getMessage());
            }

            // Validate times
            if (startTime != null && endTime != null && endTime.isBefore(startTime)) {
                throw new CustomException("End time cannot be before start time");
            }

            // Parse day of week with validation
            if (seanceDTO.getJour() != null) {
                try {
                    dayOfWeek = DayOfWeek.valueOf(seanceDTO.getJour().toUpperCase());
                } catch (IllegalArgumentException e) {
                    throw new CustomException("Invalid day of week: " + seanceDTO.getJour());
                }
            }

            // Parse frequency type with validation
            if (seanceDTO.getFrequence() != null) {
                try {
                    frequenceType = FrequenceType.fromString(seanceDTO.getFrequence().toUpperCase());
                } catch (IllegalArgumentException e) {
                    throw new CustomException("Invalid frequency type: " + seanceDTO.getFrequence());
                }
            }

            // Parse date with validation
            if (seanceDTO.getDate() != null && !seanceDTO.getDate().isEmpty()) {
                try {
                    date = LocalDate.parse(seanceDTO.getDate());
                } catch (DateTimeParseException e) {
                    throw new CustomException("Invalid date format: " + e.getMessage());
                }
            }

            // Ensure at least one search criterion is provided
            if (startTime == null && endTime == null && dayOfWeek == null &&
                    seanceDTO.getSalleId() == null && seanceDTO.getEnseignantId() == null &&
                    (seanceDTO.getTpIds() == null || seanceDTO.getTpIds().isEmpty()) &&
                    (seanceDTO.getTdIds() == null || seanceDTO.getTdIds().isEmpty()) &&
                    (seanceDTO.getBrancheIds() == null || seanceDTO.getBrancheIds().isEmpty())) {
                throw new CustomException("At least one search criterion must be provided");
            }
            CustomLogger.logInfo("after checking"+ seanceDTO);

            // Call repository with validated data
            List<Object[]> conflicts = seanceRepository.findConflictsForSeance(
                    seanceDTO.getSalleId(),
                    seanceDTO.getEnseignantId(),
                    seanceDTO.getTpIds(),
                    seanceDTO.getTdIds(),
                    seanceDTO.getBrancheIds(),
                    dayOfWeek,
                    startTime,
                    endTime,
                    frequenceType,
                    date,
                    FrequenceType.BIWEEKLY,
                    FrequenceType.CATCHUP
            );

            // Debug logging with correct casting
            for (Object[] conflict : conflicts) {
                Seance conflictingSeance = (Seance) conflict[0];
                String conflictTypes = (String) conflict[1];
                CustomLogger.logInfo("Conflicting Seance ID: " + conflictingSeance.getId());
                CustomLogger.logInfo("Conflict Types: " + conflictTypes);
            }

            return entityMapper.toSingleSeanceConflictDTOList(conflicts);

        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            throw new CustomException("Failed to check for session conflicts: " + e.getMessage());
        }
    }
    
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.SeanceDTO;
import com.scheduling.universityschedule_backend.dto.TDDTO;
import com.scheduling.universityschedule_backend.dto.EtudiantDTO;
import com.scheduling.universityschedule_backend.dto.TPDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.Etudiant;
import com.scheduling.universityschedule_backend.model.TD;
import com.scheduling.universityschedule_backend.repository.TDRepository;
import com.scheduling.universityschedule_backend.service.TDService;
import com.scheduling.universityschedule_backend.util.CustomLogger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Service implementation for managing Tutorial Groups (TD).
 * Handles CRUD operations and related functionalities for TDs.
 */
@Service
@Transactional
public class TDServiceImpl implements TDService {

    private final TDRepository tdRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     *
     * @param tdRepository The repository for TD entities
     * @param entityMapper The mapper for converting between entities and DTOs
     */
    public TDServiceImpl(TDRepository tdRepository, EntityMapper entityMapper) {
        this.tdRepository = tdRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    @Transactional(readOnly = true)
    public List<TDDTO> findAll() throws CustomException {
        try {
            CustomLogger.logInfo("Fetching all tutorial groups");
            List<TD> tds = tdRepository.findAll();

            return tds.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toTDDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve all tutorial groups", e);
            throw new CustomException("Failed to retrieve all tutorial groups", e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public TDDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Tutorial group ID cannot be null");
                throw new CustomException("Tutorial group ID cannot be null");
            }

            CustomLogger.logInfo("Fetching tutorial group with ID: " + id);
            TD td = tdRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Tutorial group not found with ID: " + id);
                        return new CustomException("Tutorial group not found with ID: " + id);
                    });

            return entityMapper.toTDDTO(td);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve tutorial group with ID: " + id, e);
            throw new CustomException("Failed to retrieve tutorial group with ID: " + id, e);
        }
    }

    @Override
    public TDDTO create(TDDTO tdDTO) throws CustomException {
        try {
            // Validate input
            if (tdDTO == null) {
                CustomLogger.logError("Tutorial group data cannot be null");
                throw new CustomException("Tutorial group data cannot be null");
            }

            // Check for duplicate ID if provided
            if (tdDTO.getId() != null && tdRepository.existsById(tdDTO.getId())) {
                CustomLogger.logError("Tutorial group with ID " + tdDTO.getId() + " already exists");
                throw new CustomException("Tutorial group with ID " + tdDTO.getId() + " already exists");
            }

            CustomLogger.logInfo("Creating new tutorial group");
            TD td = entityMapper.toTD(tdDTO);
            TD savedTD = tdRepository.save(td);

            CustomLogger.logInfo("Created tutorial group with ID: " + savedTD.getId());
            return entityMapper.toTDDTO(savedTD);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to create tutorial group", e);
            throw new CustomException("Failed to create tutorial group", e);
        }
    }

    @Override
    public TDDTO update(Long id, TDDTO tdDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                CustomLogger.logError("Tutorial group ID cannot be null");
                throw new CustomException("Tutorial group ID cannot be null");
            }

            if (tdDTO == null) {
                CustomLogger.logError("Tutorial group data cannot be null");
                throw new CustomException("Tutorial group data cannot be null");
            }

            CustomLogger.logInfo("Updating tutorial group with ID: " + id);
            TD existingTD = tdRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Tutorial group not found with ID: " + id);
                        return new CustomException("Tutorial group not found with ID: " + id);
                    });

            // Set the ID in the DTO to ensure we're updating the correct entity
            tdDTO.setId(id);
            entityMapper.updateFromDto(tdDTO, existingTD);
            TD updatedTD = tdRepository.save(existingTD);

            CustomLogger.logInfo("Updated tutorial group with ID: " + id);
            return entityMapper.toTDDTO(updatedTD);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to update tutorial group with ID: " + id, e);
            throw new CustomException("Failed to update tutorial group with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Tutorial group ID cannot be null");
                throw new CustomException("Tutorial group ID cannot be null");
            }

            CustomLogger.logInfo("Checking if tutorial group with ID: " + id + " exists");
            if (!tdRepository.existsById(id)) {
                CustomLogger.logError("Tutorial group not found with ID: " + id);
                throw new CustomException("Tutorial group not found with ID: " + id);
            }

            CustomLogger.logInfo("Deleting tutorial group with ID: " + id);
            tdRepository.deleteById(id);
            CustomLogger.logInfo("Deleted tutorial group with ID: " + id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to delete tutorial group with ID: " + id, e);
            throw new CustomException("Failed to delete tutorial group with ID: " + id, e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<TPDTO> getTPs(Long tdId) throws CustomException {
        try {
            // Validate input
            if (tdId == null) {
                CustomLogger.logError("Tutorial group ID cannot be null");
                throw new CustomException("Tutorial group ID cannot be null");
            }

            CustomLogger.logInfo("Fetching practical groups for tutorial group with ID: " + tdId);
            TD td = tdRepository.findById(tdId)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Tutorial group not found with ID: " + tdId);
                        return new CustomException("Tutorial group not found with ID: " + tdId);
                    });

            // Safely handle potential null collection
            if (td.getTpList() == null) {
                CustomLogger.logInfo("No practical groups found for tutorial group with ID: " + tdId);
                return Collections.emptyList();
            }

            List<TPDTO> tpDTOs = td.getTpList().stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toTPDTO)
                    .collect(Collectors.toList());

            CustomLogger.logInfo("Found " + tpDTOs.size() + " practical groups for tutorial group with ID: " + tdId);
            return tpDTOs;
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve practical groups for tutorial group with ID: " + tdId, e);
            throw new CustomException("Failed to retrieve practical groups for tutorial group with ID: " + tdId, e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<SeanceDTO> generateSchedule(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Tutorial group ID cannot be null");
                throw new CustomException("Tutorial group ID cannot be null");
            }

            CustomLogger.logInfo("Generating schedule for tutorial group with ID: " + id);
            TD td = tdRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Tutorial group not found with ID: " + id);
                        return new CustomException("Tutorial group not found with ID: " + id);
                    });

            // Safely handle potential null collection
            if (td.getSeances() == null) {
                CustomLogger.logInfo("No sessions found for tutorial group with ID: " + id);
                return Collections.emptyList();
            }

            List<SeanceDTO> sessionDTOs = td.getSeances().stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());

            CustomLogger.logInfo("Generated schedule with " + sessionDTOs.size() + " sessions for tutorial group with ID: " + id);
            return sessionDTOs;
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to generate schedule for tutorial group with ID: " + id, e);
            throw new CustomException("Failed to generate schedule for tutorial group with ID: " + id, e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<EtudiantDTO> getEtudiants(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Tutorial group ID cannot be null");
                throw new CustomException("Tutorial group ID cannot be null");
            }

            CustomLogger.logInfo("Fetching students for tutorial group with ID: " + id);
            List<EtudiantDTO> students;

            // Check if there's a custom repository method for this query
            try {
                // This uses the repository's custom method
                CustomLogger.logInfo("Using repository method to fetch students directly");
                students = tdRepository.findAllEtudiantsByTdId(id).stream()
                        .filter(Objects::nonNull)
                        .map(entityMapper::toEtudiantDTO)
                        .collect(Collectors.toList());
            } catch (Exception ex) {
                // Fallback to relationship navigation if custom method isn't available
                CustomLogger.logInfo("Falling back to relationship navigation to get students");
                TD td = tdRepository.findById(id)
                        .orElseThrow(() -> {
                            CustomLogger.logError("Tutorial group not found with ID: " + id);
                            return new CustomException("Tutorial group not found with ID: " + id);
                        });

                // Safely handle potential null collection
                if (td.getTpList() == null) {
                    CustomLogger.logInfo("No practical groups found for tutorial group with ID: " + id);
                    return Collections.emptyList();
                }

                students = td.getTpList().stream()
                        .filter(Objects::nonNull)
                        .flatMap(tp -> {
                            if (tp.getEtudiants() == null) {
                                return Stream.<Etudiant>empty();
                            }
                            return tp.getEtudiants().stream();
                        })
                        .filter(Objects::nonNull)
                        .map(entityMapper::toEtudiantDTO)
                        .collect(Collectors.toList());
            }

            CustomLogger.logInfo("Found " + students.size() + " students for tutorial group with ID: " + id);
            return students;
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve students for tutorial group with ID: " + id, e);
            throw new CustomException("Failed to retrieve students for tutorial group with ID: " + id, e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.TechnicienDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.Technicien;
import com.scheduling.universityschedule_backend.repository.TechnicienRepository;
import com.scheduling.universityschedule_backend.service.TechnicienService;
import com.scheduling.universityschedule_backend.util.CustomLogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Implementation of TechnicienService interface.
 * Handles technician-related operations and resource management.
 *
 * @author Mahmoud-ABK
 * @version 1.0
 * @since 2025-05-04
 */
@Service
public class TechnicienServiceImpl implements TechnicienService {

    private final TechnicienRepository technicienRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     *
     * @param technicienRepository Repository for Technician entities
     * @param entityMapper Mapper for converting between entities and DTOs
     */
    @Autowired
    public TechnicienServiceImpl(TechnicienRepository technicienRepository, EntityMapper entityMapper) {
        this.technicienRepository = technicienRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    @Transactional(readOnly = true)
    public TechnicienDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Technician ID cannot be null");
                throw new CustomException("Technician ID cannot be null");
            }

            CustomLogger.logInfo("Fetching technician with ID: " + id);
            Technicien technicien = technicienRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Technician not found with ID: " + id);
                        return new CustomException("Technician not found with ID: " + id);
                    });

            return entityMapper.toTechnicienDTO(technicien);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve technician with ID: " + id, e);
            throw new CustomException("Failed to retrieve technician with ID: " + id, e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<TechnicienDTO> findAll() throws CustomException {
        try {
            CustomLogger.logInfo("Fetching all technicians");
            List<Technicien> techniciens = technicienRepository.findAll();

            // Handle empty list case
            if (techniciens.isEmpty()) {
                CustomLogger.logInfo("No technicians found in the system");
                return Collections.emptyList();
            }

            List<TechnicienDTO> technicienDTOs = techniciens.stream()
                    .map(entityMapper::toTechnicienDTO)
                    .collect(Collectors.toList());

            CustomLogger.logInfo("Found " + technicienDTOs.size() + " technicians");
            return technicienDTOs;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve all technicians", e);
            throw new CustomException("Failed to retrieve all technicians", e);
        }
    }

    @Override
    @Transactional
    public TechnicienDTO create(TechnicienDTO technicienDTO) throws CustomException {
        try {
            // Validate input
            if (technicienDTO == null) {
                CustomLogger.logError("Technician data cannot be null");
                throw new CustomException("Technician data cannot be null");
            }

            // Check for duplicate ID if provided
            if (technicienDTO.getId() != null && technicienRepository.existsById(technicienDTO.getId())) {
                CustomLogger.logError("Technician with ID " + technicienDTO.getId() + " already exists");
                throw new CustomException("Technician with ID " + technicienDTO.getId() + " already exists");
            }

            CustomLogger.logInfo("Creating new technician");
            Technicien technicien = entityMapper.toTechnicien(technicienDTO);
            Technicien savedTechnicien = technicienRepository.save(technicien);

            CustomLogger.logInfo("Created technician with ID: " + savedTechnicien.getId());
            return entityMapper.toTechnicienDTO(savedTechnicien);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to create technician", e);
            throw new CustomException("Failed to create technician", e);
        }
    }

    @Override
    @Transactional
    public TechnicienDTO update(Long id, TechnicienDTO technicienDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                CustomLogger.logError("Technician ID cannot be null");
                throw new CustomException("Technician ID cannot be null");
            }

            if (technicienDTO == null) {
                CustomLogger.logError("Technician data cannot be null");
                throw new CustomException("Technician data cannot be null");
            }

            CustomLogger.logInfo("Updating technician with ID: " + id);
            Technicien existingTechnicien = technicienRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Technician not found with ID: " + id);
                        return new CustomException("Technician not found with ID: " + id);
                    });

            // Set the ID in the DTO to ensure we're updating the correct entity
            technicienDTO.setId(id);
            entityMapper.updateFromDto(technicienDTO, existingTechnicien);
            Technicien updatedTechnicien = technicienRepository.save(existingTechnicien);

            CustomLogger.logInfo("Updated technician with ID: " + id);
            return entityMapper.toTechnicienDTO(updatedTechnicien);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to update technician with ID: " + id, e);
            throw new CustomException("Failed to update technician with ID: " + id, e);
        }
    }

    @Override
    @Transactional
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Technician ID cannot be null");
                throw new CustomException("Technician ID cannot be null");
            }

            CustomLogger.logInfo("Checking if technician with ID: " + id + " exists");
            if (!technicienRepository.existsById(id)) {
                CustomLogger.logError("Technician not found with ID: " + id);
                throw new CustomException("Technician not found with ID: " + id);
            }

            CustomLogger.logInfo("Deleting technician with ID: " + id);
            technicienRepository.deleteById(id);
            CustomLogger.logInfo("Deleted technician with ID: " + id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to delete technician with ID: " + id, e);
            throw new CustomException("Failed to delete technician with ID: " + id, e);
        }
    }
}package com.scheduling.universityschedule_backend.service.impl;

import com.scheduling.universityschedule_backend.dto.SeanceDTO;
import com.scheduling.universityschedule_backend.dto.TPDTO;
import com.scheduling.universityschedule_backend.dto.EtudiantDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.TP;
import com.scheduling.universityschedule_backend.repository.TPRepository;
import com.scheduling.universityschedule_backend.service.TPService;
import com.scheduling.universityschedule_backend.util.CustomLogger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Service implementation for managing Practical Groups (TP).
 * Handles CRUD operations and related functionalities for TPs.
 *
 * @author Mahmoud-ABK
 * @version 1.0
 * @since 2025-03-05
 */
@Service
@Transactional
public class TPServiceImpl implements TPService {

    private final TPRepository tpRepository;
    private final EntityMapper entityMapper;

    /**
     * Constructor injection for dependencies
     *
     * @param tpRepository The repository for TP entities
     * @param entityMapper The mapper for converting between entities and DTOs
     */
    public TPServiceImpl(TPRepository tpRepository, EntityMapper entityMapper) {
        this.tpRepository = tpRepository;
        this.entityMapper = entityMapper;
    }

    @Override
    @Transactional(readOnly = true)
    public List<TPDTO> findAll() throws CustomException {
        try {
            CustomLogger.logInfo("Fetching all practical groups");
            List<TP> tps = tpRepository.findAll();

            List<TPDTO> tpDTOs = tps.stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toTPDTO)
                    .collect(Collectors.toList());

            CustomLogger.logInfo("Found " + tpDTOs.size() + " practical groups");
            return tpDTOs;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve all practical groups", e);
            throw new CustomException("Failed to retrieve all practical groups", e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public TPDTO findById(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Practical group ID cannot be null");
                throw new CustomException("Practical group ID cannot be null");
            }

            CustomLogger.logInfo("Fetching practical group with ID: " + id);
            TP tp = tpRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Practical group not found with ID: " + id);
                        return new CustomException("Practical group not found with ID: " + id);
                    });

            return entityMapper.toTPDTO(tp);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve practical group with ID: " + id, e);
            throw new CustomException("Failed to retrieve practical group with ID: " + id, e);
        }
    }

    @Override
    public TPDTO create(TPDTO tpDTO) throws CustomException {
        try {
            // Validate input
            if (tpDTO == null) {
                CustomLogger.logError("Practical group data cannot be null");
                throw new CustomException("Practical group data cannot be null");
            }

            // Check for duplicate ID if provided
            if (tpDTO.getId() != null && tpRepository.existsById(tpDTO.getId())) {
                CustomLogger.logError("Practical group with ID " + tpDTO.getId() + " already exists");
                throw new CustomException("Practical group with ID " + tpDTO.getId() + " already exists");
            }

            CustomLogger.logInfo("Creating new practical group");
            TP tp = entityMapper.toTP(tpDTO);
            TP savedTP = tpRepository.save(tp);

            CustomLogger.logInfo("Created practical group with ID: " + savedTP.getId());
            return entityMapper.toTPDTO(savedTP);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to create practical group", e);
            throw new CustomException("Failed to create practical group", e);
        }
    }

    @Override
    public TPDTO update(Long id, TPDTO tpDTO) throws CustomException {
        try {
            // Validate inputs
            if (id == null) {
                CustomLogger.logError("Practical group ID cannot be null");
                throw new CustomException("Practical group ID cannot be null");
            }

            if (tpDTO == null) {
                CustomLogger.logError("Practical group data cannot be null");
                throw new CustomException("Practical group data cannot be null");
            }

            CustomLogger.logInfo("Updating practical group with ID: " + id);
            TP existingTP = tpRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Practical group not found with ID: " + id);
                        return new CustomException("Practical group not found with ID: " + id);
                    });

            // Set the ID in the DTO to ensure we're updating the correct entity
            tpDTO.setId(id);
            entityMapper.updateFromDto(tpDTO, existingTP);
            TP updatedTP = tpRepository.save(existingTP);

            CustomLogger.logInfo("Updated practical group with ID: " + id);
            return entityMapper.toTPDTO(updatedTP);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to update practical group with ID: " + id, e);
            throw new CustomException("Failed to update practical group with ID: " + id, e);
        }
    }

    @Override
    public void delete(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Practical group ID cannot be null");
                throw new CustomException("Practical group ID cannot be null");
            }

            CustomLogger.logInfo("Checking if practical group with ID: " + id + " exists");
            if (!tpRepository.existsById(id)) {
                CustomLogger.logError("Practical group not found with ID: " + id);
                throw new CustomException("Practical group not found with ID: " + id);
            }

            CustomLogger.logInfo("Deleting practical group with ID: " + id);
            tpRepository.deleteById(id);
            CustomLogger.logInfo("Deleted practical group with ID: " + id);
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to delete practical group with ID: " + id, e);
            throw new CustomException("Failed to delete practical group with ID: " + id, e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<EtudiantDTO> getStudents(Long tpId) throws CustomException {
        CustomLogger.logInfo("Redirecting getStudents to getEtudiants method for practical group: " + tpId);
        return getEtudiants(tpId);
    }

    @Override
    @Transactional(readOnly = true)
    public List<SeanceDTO> generateSchedule(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Practical group ID cannot be null");
                throw new CustomException("Practical group ID cannot be null");
            }

            CustomLogger.logInfo("Generating schedule for practical group with ID: " + id);
            TP tp = tpRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Practical group not found with ID: " + id);
                        return new CustomException("Practical group not found with ID: " + id);
                    });

            // Safely handle potential null collection
            if (tp.getSeances() == null) {
                CustomLogger.logInfo("No sessions found for practical group with ID: " + id);
                return Collections.emptyList();
            }

            List<SeanceDTO> sessionDTOs = tp.getSeances().stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toSeanceDTO)
                    .collect(Collectors.toList());

            CustomLogger.logInfo("Generated schedule with " + sessionDTOs.size() + " sessions for practical group with ID: " + id);
            return sessionDTOs;
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to generate schedule for practical group with ID: " + id, e);
            throw new CustomException("Failed to generate schedule for practical group with ID: " + id, e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<EtudiantDTO> getEtudiants(Long id) throws CustomException {
        try {
            // Validate input
            if (id == null) {
                CustomLogger.logError("Practical group ID cannot be null");
                throw new CustomException("Practical group ID cannot be null");
            }

            CustomLogger.logInfo("Fetching students for practical group with ID: " + id);
            TP tp = tpRepository.findById(id)
                    .orElseThrow(() -> {
                        CustomLogger.logError("Practical group not found with ID: " + id);
                        return new CustomException("Practical group not found with ID: " + id);
                    });

            // Safely handle potential null collection
            if (tp.getEtudiants() == null) {
                CustomLogger.logInfo("No students found for practical group with ID: " + id);
                return Collections.emptyList();
            }

            List<EtudiantDTO> students = tp.getEtudiants().stream()
                    .filter(Objects::nonNull)
                    .map(entityMapper::toEtudiantDTO)
                    .collect(Collectors.toList());

            CustomLogger.logInfo("Found " + students.size() + " students for practical group with ID: " + id);
            return students;
        } catch (CustomException e) {
            throw e;
        } catch (Exception e) {
            CustomLogger.logError("Failed to retrieve students for practical group with ID: " + id, e);
            throw new CustomException("Failed to retrieve students for practical group with ID: " + id, e);
        }
    }


}
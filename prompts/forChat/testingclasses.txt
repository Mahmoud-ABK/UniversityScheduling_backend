package com.scheduling.universityschedule_backend.testingclasses;



import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.mapper.EntityMapper;
import com.scheduling.universityschedule_backend.model.*;
import com.scheduling.universityschedule_backend.repository.*;
import com.scheduling.universityschedule_backend.util.CustomLogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Component
@Transactional
public class EntityMapperTester {

    @Autowired
    private EntityMapper entityMapper;
    @Autowired
    private PersonneRepository personneRepository;
    @Autowired
    private EnseignantRepository enseignantRepository;
    @Autowired
    private BrancheRepository brancheRepository;
    @Autowired
    private SalleRepository salleRepository;
    @Autowired
    private SeanceRepository seanceRepository;
    @Autowired
    private TDRepository tdRepository;
    @Autowired
    private TPRepository tpRepository;
    @Autowired
    private SignalRepository signalRepository;
    @Autowired
    private PropositionDeRattrapageRepository propositionDeRattrapageRepository;
    @Autowired
    private NotificationRepository notificationRepository;
    @Autowired
    private FichierExcelRepository fichierExcelRepository;

    public void testEntityMapper() throws CustomException {
        CustomLogger.logInfo("=================== Testing Entity Mapper (Both Ways) ====================");

        // Fetch entities from the database (assuming each repository returns a non-empty list)
        Personne personne = personneRepository.findAll().getFirst();
        Enseignant enseignant = enseignantRepository.findAll().getFirst();
        Branche branche = brancheRepository.findAll().getFirst();
        Salle salle = salleRepository.findAll().getFirst();
        Seance seance = seanceRepository.findAll().getFirst();
        TD td = tdRepository.findAll().getFirst();
        TP tp = tpRepository.findAll().getFirst();
        Signal signal = signalRepository.findAll().getFirst();
        PropositionDeRattrapage proposition = propositionDeRattrapageRepository.findAll().getFirst();
        Notification notification = notificationRepository.findAll().getFirst();
        FichierExcel fichierExcel = fichierExcelRepository.findAll().getFirst();

        // --- Mapping: Entity -> DTO ---
        PersonneDTO personneDTO = entityMapper.toPersonneDTO(personne);
        CustomLogger.logInfo("Entity -> DTO | PersonneDTO: " + personneDTO);

        EnseignantDTO enseignantDTO = entityMapper.toEnseignantDTO(enseignant);
        CustomLogger.logInfo("Entity -> DTO | EnseignantDTO: " + enseignantDTO);


        BrancheDTO brancheDTO = entityMapper.toBrancheDTO(branche);
        CustomLogger.logInfo("Entity -> DTO | BrancheDTO: " + brancheDTO);

        SalleDTO salleDTO = entityMapper.toSalleDTO(salle);
        CustomLogger.logInfo("Entity -> DTO | SalleDTO: " + salleDTO);

        SeanceDTO seanceDTO = entityMapper.toSeanceDTO(seance);
        CustomLogger.logInfo("Entity -> DTO | SeanceDTO: " + seanceDTO);

        TDDTO tdDTO = entityMapper.toTDDTO(td);
        CustomLogger.logInfo("Entity -> DTO | TDDTO: " + tdDTO);

        TPDTO tpDTO = entityMapper.toTPDTO(tp);
        CustomLogger.logInfo("Entity -> DTO | TPDTO: " + tpDTO);

        SignalDTO signalDTO = entityMapper.toSignalDTO(signal);
        CustomLogger.logInfo("Entity -> DTO | SignalDTO: " + signalDTO);

        PropositionDeRattrapageDTO propositionDTO = entityMapper.toPropositionDeRattrapageDTO(proposition);
        CustomLogger.logInfo("Entity -> DTO | PropositionDeRattrapageDTO: " + propositionDTO);

        NotificationDTO notificationDTO = entityMapper.toNotificationDTO(notification);
        CustomLogger.logInfo("Entity -> DTO | NotificationDTO: " + notificationDTO);

        FichierExcelDTO fichierExcelDTO = entityMapper.toFichierExcelDTO(fichierExcel);
        CustomLogger.logInfo("Entity -> DTO | FichierExcelDTO: " + fichierExcelDTO);

        CustomLogger.logInfo("Mapping from DTO to Entity========================================================");
        // --- Mapping: DTO -> Entity ---
        Personne mappedPersonne = entityMapper.toPersonne(personneDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped Personne: " + mappedPersonne);

        Enseignant mappedEnseignant = entityMapper.toEnseignant(enseignantDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped Enseignant: " + mappedEnseignant);
        mappedEnseignant.getSeances().forEach(seance1 -> CustomLogger.logInfo("examining datafetching " + seance1 + "\n"));
        Branche mappedBranche = entityMapper.toBranche(brancheDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped Branche: " + mappedBranche);

        Salle mappedSalle = entityMapper.toSalle(salleDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped Salle: " + mappedSalle);

        Seance mappedSeance = entityMapper.toSeance(seanceDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped Seance: " + mappedSeance);

        TD mappedTD = entityMapper.toTD(tdDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped TD: " + mappedTD);

        TP mappedTP = entityMapper.toTP(tpDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped TP: " + mappedTP);

        Signal mappedSignal = entityMapper.toSignal(signalDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped Signal: " + mappedSignal);

        PropositionDeRattrapage mappedProposition = entityMapper.toPropositionDeRattrapage(propositionDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped PropositionDeRattrapage: " + mappedProposition);

        Notification mappedNotification = entityMapper.toNotification(notificationDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped Notification: " + mappedNotification);

        FichierExcel mappedFichierExcel = entityMapper.toFichierExcel(fichierExcelDTO);
        CustomLogger.logInfo("DTO -> Entity | Mapped FichierExcel: " + mappedFichierExcel);

        CustomLogger.logInfo("=================== Finished Entity Mapping Test ===================");
    }

    public void testConflictMappings() throws CustomException {
        CustomLogger.logInfo("=========== testing conflict mapping ==================");
        // Fetch conflicting seance pairs
        List<Object[]> conflictPairs = seanceRepository.findConflictingSeancePairs(FrequenceType.BIWEEKLY,FrequenceType.CATCHUP);
        List<SeanceConflictDTO> seanceConflictDTOs = entityMapper.toSeanceConflictDTOList(conflictPairs);
        CustomLogger.logInfo("SeanceConflictDTOs: ------------------" );
        seanceConflictDTOs.forEach(seanceConflictDTO -> {CustomLogger.logInfo( seanceConflictDTO + "\n" );} );

        // Fetch room conflicts
        List<Object[]> roomConflicts = seanceRepository.findConflictingByRooms(FrequenceType.BIWEEKLY,FrequenceType.CATCHUP);
        List<SeanceRoomConflictDTO> seanceRoomConflictDTOs = entityMapper.toSeanceRoomConflictDTOList(roomConflicts);
        CustomLogger.logInfo("SeanceRoomConflictDTOs: --------------------" );
        seanceRoomConflictDTOs.forEach(seanceRoomConflictDTO -> {CustomLogger.logInfo( seanceRoomConflictDTO + "\n" );} );

        // Fetch conflicts for a specific seance
        Long seanceId = seanceRepository.findAll().getFirst().getId();
        List<Object[]> conflictsForSeance = seanceRepository.findRoomConflictsForSeanceById(seanceId,FrequenceType.BIWEEKLY,FrequenceType.CATCHUP);
        List<SingleSeanceConflictDTO> singleSeanceConflictDTOs = entityMapper.toSingleSeanceConflictDTOList(conflictsForSeance);
        CustomLogger.logInfo("SingleSeanceConflictDTOs: ------------" );
        singleSeanceConflictDTOs.forEach(seanceConflictDTO -> {CustomLogger.logInfo( seanceConflictDTO + "\n" );} );
        CustomLogger.logInfo("===================FINISHED ---------------------------------");
    }
}package com.scheduling.universityschedule_backend.testingclasses;

import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.model.*;
import com.scheduling.universityschedule_backend.repository.*;
import com.scheduling.universityschedule_backend.util.CustomLogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.*;
import java.util.*;
import java.util.stream.Collectors;

@Component
public class JPAtest {
    private static final List<String> NOMS = Arrays.asList(
            "Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller",
            "Wilson", "Moore", "Taylor", "Anderson", "Thomas", "Jackson", "White"
    );

    private static final List<String> PRENOMS = Arrays.asList(
            "James", "Mary", "John", "Patricia", "Robert", "Jennifer", "Michael",
            "Linda", "William", "Elizabeth", "David", "Barbara", "Richard", "Susan"
    );

    private static final Random RANDOM = new Random();

    @Autowired private PersonneRepository personneRepository;
    @Autowired private EnseignantRepository enseignantRepository;
    @Autowired private AdministrateurRepository administrateurRepository;
    @Autowired private TechnicienRepository technicienRepository;
    @Autowired private EtudiantRepository etudiantRepository;
    @Autowired private BrancheRepository brancheRepository;
    @Autowired private SalleRepository salleRepository;
    @Autowired private SeanceRepository seanceRepository;
    @Autowired private TDRepository tdRepository;
    @Autowired private TPRepository tpRepository;
    @Autowired private NotificationRepository notificationRepository;
    @Autowired private SignalRepository signalRepository;
    @Autowired private PropositionDeRattrapageRepository propositionDeRattrapageRepository;
    @Autowired private FichierExcelRepository fichierExcelRepository;

    public void populateDatabase(int sampleSize) throws CustomException {
        CustomLogger.logInfo("=============================Populating Database====================");

        // 1. Administrateurs
        List<Administrateur> admins = new ArrayList<>();
        for (int i = 0; i < sampleSize % 3; i++) {
            Administrateur admin = new Administrateur();
            admin.setCin(generateRandomCin());
            admin.setNom(pickNom());
            admin.setPrenom(pickPrenom());
            admin.setEmail("admin" + i + "@example.com");
            admin.setTel(generateRandomTel());
            admin.setAdresse("Admin Address " + i);
            admin.setCodeAdmin("ADM" + i);
            admins.add(admin);
        }
        administrateurRepository.saveAll(admins);
        CustomLogger.logInfo("Administrateur count: " + admins.size());

        // 2. Enseignants
        List<Enseignant> enseignants = new ArrayList<>();
        for (int i = 0; i < sampleSize; i++) {
            Enseignant ens = new Enseignant();
            ens.setCin(generateRandomCin());
            ens.setNom(pickNom());
            ens.setPrenom(pickPrenom());
            ens.setEmail("enseignant" + i + "@example.com");
            ens.setTel(generateRandomTel());
            ens.setAdresse("Teacher Address " + i);
            ens.setCodeEnseignant("ENS" + i);
            ens.setHeures((int)(Math.random() * 40) + 1);
            enseignants.add(ens);
        }
        enseignantRepository.saveAll(enseignants);
        CustomLogger.logInfo("Enseignant count: " + enseignants.size());

        // 3. Techniciens
        List<Technicien> techniciens = new ArrayList<>();
        for (int i = 0; i < sampleSize % 3; i++) {
            Technicien tech = new Technicien();
            tech.setCin(generateRandomCin());
            tech.setNom(pickNom());
            tech.setPrenom(pickPrenom());
            tech.setEmail("tech" + i + "@example.com");
            tech.setTel(generateRandomTel());
            tech.setAdresse("Tech Address " + i);
            tech.setCodeTechnicien("TECH" + i);
            techniciens.add(tech);
        }
        technicienRepository.saveAll(techniciens);
        CustomLogger.logInfo("Technicien count: " + techniciens.size());

        // 4. Branches
        List<Branche> branches = new ArrayList<>();
        for (int i = 0; i < sampleSize / 15; i++) {
            Branche branche = new Branche();
            branche.setNiveau(pickNiveau());
            branche.setSpecialite(pickSpecialty(branche.getNiveau()));
            branche.setNbTD((int)(Math.random() * 5) + 1);
            branche.setDepartement(Math.random() < 0.33 ? "Technologie" : "informatique");
            branches.add(branche);
        }
        brancheRepository.saveAll(branches);
        CustomLogger.logInfo("Branche count: " + branches.size());

        // 5. Salles
        List<Salle> salles = new ArrayList<>();
        for (int i = 0; i < sampleSize / 10; i++) {
            Salle salle = new Salle();
            salle.setIdentifiant("SAL" + i);
            salle.setType("Lecture Hall");
            salle.setCapacite((int)(Math.random() * 150) + 50);
            salles.add(salle);
        }
        salleRepository.saveAll(salles);
        CustomLogger.logInfo("Salle count: " + salles.size());

        // 6. TDs
        List<TD> tds = new ArrayList<>();
        for (int i = 0; i < (sampleSize * 3) / 20; i++) {
            TD td = new TD();
            td.setNb((int)(Math.random() * 5) + 1);
            td.setNbTP((int)(Math.random() * 3) + 1);
            td.setBranche(branches.get((int)(Math.random() * branches.size())));
            tds.add(td);
        }
        tdRepository.saveAll(tds);
        CustomLogger.logInfo("TD count: " + tds.size());

        // 7. TPs
        List<TP> tps = new ArrayList<>();
        for (int i = 0; i < 6; i++) {
            TP tp = new TP();
            tp.setNb((int)(Math.random() * 3) + 1);
            tp.setTd(tds.get((int)(Math.random() * tds.size())));
            tps.add(tp);
            if (i > 2 && Math.random() < 0.5) break;
        }
        tpRepository.saveAll(tps);
        CustomLogger.logInfo("TP count: " + tps.size());

        // 8. Etudiants
        List<Etudiant> etudiants = new ArrayList<>();
        for (int i = 0; i < sampleSize * 3; i++) {
            Etudiant etu = new Etudiant();
            etu.setCin(generateRandomCin());
            etu.setNom(pickNom());
            etu.setPrenom(pickPrenom());
            etu.setEmail("etudiant" + i + "@example.com");
            etu.setTel(generateRandomTel());
            etu.setAdresse("Student Address " + i);
            etu.setMatricule("MAT" + i);
            etu.setBranche(branches.get((int)(Math.random() * branches.size())));
            etu.setTp(tps.get((int)(Math.random() * tps.size())));
            etudiants.add(etu);
        }
        etudiantRepository.saveAll(etudiants);
        CustomLogger.logInfo("Etudiant count: " + etudiants.size());

        // 9. Seances
        List<Seance> seances = new ArrayList<>();
        for (int i = 0; i < sampleSize * 2; i++) {
            Seance seance = new Seance();
            seance.setName("Seance " + i);
            seance.setMatiere(pickRandomSubject());
            seance.setJour(randomDay());
            seance.setHeureDebut(randomTime());
            seance.setHeureFin(randomTimeAfter(seance.getHeureDebut()));
            seance.setFrequence(randomFrequence());
            seance.setType(pickRandomSeanceType());
            seance.setDate(randomFrequence() == FrequenceType.CATCHUP ? LocalDate.now().plusDays(i) : null);
            seance.setSalle(salles.get((int)(Math.random() * salles.size())));
            seance.setEnseignant(enseignants.get((int)(Math.random() * enseignants.size())));
            seance.setBranches(List.of(branches.get((int)(Math.random() * branches.size()))));
            seance.setTds(List.of(tds.get((int)(Math.random() * tds.size()))));
            seance.setTps(List.of(tps.get((int)(Math.random() * tps.size()))));
            seances.add(seance);
        }
        seanceRepository.saveAll(seances);
        CustomLogger.logInfo("Seance count: " + seances.size());

        // 10. Signals
        List<Signal> signals = new ArrayList<>();
        for (int i = 0; i < Math.max(1, sampleSize / 3); i++) {
            Signal signal = new Signal();
            signal.setMessage("Signal Issue " + i);
            signal.setSeverity(Math.random() > 0.5 ? "High" : "Low");
            signal.setTimestamp(LocalDateTime.now().plusMinutes((int)(Math.random() * 1000)));
            signal.setEnseignant(enseignants.get((int)(Math.random() * enseignants.size())));
            signals.add(signal);
        }
        signalRepository.saveAll(signals);
        CustomLogger.logInfo("Signal count: " + signals.size());

        // 11. PropositionsDeRattrapage
        List<PropositionDeRattrapage> propositions = new ArrayList<>();
        for (int i = 0; i < Math.max(1, sampleSize / 3); i++) {
            PropositionDeRattrapage prop = new PropositionDeRattrapage();

            // Basic info
            prop.setName("Makeup Session " + i);
            prop.setMatiere(pickRandomSubject());
            prop.setType(pickRandomSeanceType());

            // Time settings
            LocalTime startTime = randomTime();
            prop.setHeureDebut(startTime);
            prop.setHeureFin(randomTimeAfter(startTime));
            prop.setDate(LocalDateTime.now().plusDays(RANDOM.nextInt(14))); // Next 2 weeks

            // Status and reason
            prop.setStatus(Status.PENDING); // New propositions always start as PENDING
            prop.setReason(pickRandomReason());

            // Relationships
            prop.setEnseignant(enseignants.get(RANDOM.nextInt(enseignants.size())));
            prop.setBranches(pickRandomBranches(branches, 1, 3));  // 1-3 branches
            prop.setTds(pickRandomTDs(tds, 1, 2));                 // 1-2 TDs
            prop.setTps(pickRandomTPs(tps, 0, 2));                 // 0-2 TPs

            propositions.add(prop);
        }
        propositionDeRattrapageRepository.saveAll(propositions);
        CustomLogger.logInfo("PropositionDeRattrapage count: " + propositions.size());

        // 12. Notifications
        List<Notification> notifications = new ArrayList<>();
        for (int i = 0; i < Math.max(1, sampleSize / 2); i++) {
            Notification notif = new Notification();
            notif.setMessage("Notification " + i);
            notif.setDate(LocalDateTime.now().plusMinutes((int)(Math.random() * 1000)));
            notif.setType("Update");
            notif.setIsread(false);
            notif.setRecepteur(enseignants.get((int)(Math.random() * enseignants.size())));
            notif.setExpediteur(admins.isEmpty() ? null : admins.get((int)(Math.random() * admins.size())));
            notifications.add(notif);
        }
        notificationRepository.saveAll(notifications);
        CustomLogger.logInfo("Notification count: " + notifications.size());

        // 13. FichiersExcel
        List<FichierExcel> fichiers = new ArrayList<>();
        for (int i = 0; i < Math.max(1, sampleSize / 5); i++) {
            FichierExcel fichier = new FichierExcel();
            fichier.setFileName("schedule_" + i + ".xlsx");
            fichier.setStatus("Imported");
            fichier.setErrors(List.of("No errors"));
            fichier.setImportDate(LocalDateTime.now());
            fichiers.add(fichier);
        }
        fichierExcelRepository.saveAll(fichiers);
        CustomLogger.logInfo("FichierExcel count: " + fichiers.size());

        CustomLogger.logInfo("Database populated with sampleSize = " + sampleSize);
        CustomLogger.logInfo("========================Finished populating database===========");
    }

    // Helper methods

    private SeanceType pickRandomSeanceType() {
        SeanceType[] types = SeanceType.values();
        return types[RANDOM.nextInt(types.length)];
    }

    private String pickRandomSubject() {
        String[] subjects = {
                "Mathematics", "Physics", "Chemistry",
                "Computer Architecture", "Database Systems", "Operating Systems",
                "Data Structures", "Algorithms", "Software Engineering",
                "Networks", "Artificial Intelligence", "Web Development",
                "Mobile Development", "Cloud Computing", "Security",
                "Statistics", "Linear Algebra", "Calculus"
        };
        return subjects[RANDOM.nextInt(subjects.length)];
    }

    private Status pickRandomStatus() {
        Status[] statuses = Status.values();
        return statuses[RANDOM.nextInt(statuses.length)];
    }

    private String pickRandomReason() {
        String[] reasons = {
                "Previous session cancelled due to emergency",
                "Holiday makeup session",
                "Extra practice needed before exam",
                "Schedule conflict resolution",
                "Weather-related cancellation makeup",
                "Technical issues in previous session",
                "Extended topic coverage needed",
                "Preparatory session for upcoming exam",
                "Missed class coverage",
                "Student request for additional practice"
        };
        return reasons[RANDOM.nextInt(reasons.length)];
    }

    private List<Branche> pickRandomBranches(List<Branche> branches, int min, int max) {
        int count = min + RANDOM.nextInt(max - min + 1);
        List<Branche> selected = new ArrayList<>();
        for (int i = 0; i < count && i < branches.size(); i++) {
            selected.add(branches.get(RANDOM.nextInt(branches.size())));
        }
        return new ArrayList<>(new HashSet<>(selected)); // Remove duplicates
    }

    private List<TD> pickRandomTDs(List<TD> tds, int min, int max) {
        int count = min + RANDOM.nextInt(max - min + 1);
        List<TD> selected = new ArrayList<>();
        for (int i = 0; i < count && i < tds.size(); i++) {
            selected.add(tds.get(RANDOM.nextInt(tds.size())));
        }
        return new ArrayList<>(new HashSet<>(selected)); // Remove duplicates
    }

    private List<TP> pickRandomTPs(List<TP> tps, int min, int max) {
        int count = min + RANDOM.nextInt(max - min + 1);
        List<TP> selected = new ArrayList<>();
        for (int i = 0; i < count && i < tps.size(); i++) {
            selected.add(tps.get(RANDOM.nextInt(tps.size())));
        }
        return new ArrayList<>(new HashSet<>(selected)); // Remove duplicates
    }
    private DayOfWeek randomDay() {
        return DayOfWeek.values()[RANDOM.nextInt(5)];
    }

    private LocalTime randomTime() {
        return LocalTime.of(8 + RANDOM.nextInt(9), RANDOM.nextInt(12) * 5);
    }

    private LocalTime randomTimeAfter(LocalTime start) {
        return start.plusMinutes(90 + RANDOM.nextInt(90));
    }

    private FrequenceType randomFrequence() {
        FrequenceType[] freqs = FrequenceType.values();
        return freqs[RANDOM.nextInt(freqs.length)];
    }

    private String generateRandomCin() {
        return String.valueOf(100000000 + RANDOM.nextInt(900000000));
    }

    private String generateRandomTel() {
        return String.valueOf(1000000000L + RANDOM.nextLong(9000000000L));
    }

    private static String pickNom() {
        return NOMS.get(RANDOM.nextInt(NOMS.size()));
    }

    private static String pickPrenom() {
        return PRENOMS.get(RANDOM.nextInt(PRENOMS.size()));
    }

    private static String pickNiveau() {
        String[] systems = {"L", "CPI", "ING", "MR", "MP"};
        String system = systems[RANDOM.nextInt(systems.length)];
        int yearLevel = switch (system) {
            case "L" -> RANDOM.nextInt(3) + 1;
            case "CPI" -> RANDOM.nextInt(2) + 1;
            case "ING" -> RANDOM.nextInt(3) + 1;
            default -> RANDOM.nextInt(2) + 1;
        };
        return system + yearLevel;
    }

    private static String pickSpecialty(String niveau) {
        if (niveau.startsWith("L")) return Arrays.asList("EEA", "INFO", "TIC", "MATH").get(RANDOM.nextInt(4));
        if (niveau.startsWith("CPI")) return "INFO";
        if (niveau.startsWith("ING")) return Arrays.asList("ELEC", "INFO").get(RANDOM.nextInt(2));
        return Arrays.asList("GL", "I3", "DS").get(RANDOM.nextInt(3));
    }

    @Transactional
    public void testRetrieveEntities() {
        CustomLogger.logInfo("============================= Retrieving Entity Samples =====================");

        // 1. Administrateurs
        List<Administrateur> admins = administrateurRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("----- Administrateurs (" + admins.size() + ") -----");
        admins.forEach(admin -> CustomLogger.logInfo(
                "Code: " + admin.getCodeAdmin() +
                        " | Name: " + admin.getNom() + " " + admin.getPrenom() +
                        " | Email: " + admin.getEmail() +
                        " | CIN: " + admin.getCin()
        ));

        // 2. Enseignants
        List<Enseignant> teachers = enseignantRepository.findAll().stream().limit(3).toList();
        CustomLogger.logInfo("\n----- Enseignants (" + teachers.size() + ") -----");
        teachers.forEach(teacher -> CustomLogger.logInfo(
                "Code: " + teacher.getCodeEnseignant() +
                        " | Hours: " + teacher.getHeures() +
                        " | Tel: " + teacher.getTel() +
                        " | Seances: " + (teacher.getSeances() != null ? teacher.getSeances().size() : 0)
        ));

        // 3. Techniciens
        List<Technicien> techs = technicienRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("\n----- Techniciens (" + techs.size() + ") -----");
        techs.forEach(tech -> CustomLogger.logInfo(
                "Code: " + tech.getCodeTechnicien() +
                        " | Address: " + tech.getAdresse() +
                        " | Email: " + tech.getEmail()
        ));

        // 4. Etudiants
        List<Etudiant> students = etudiantRepository.findAll().stream().limit(3).toList();
        CustomLogger.logInfo("\n----- Etudiants (" + students.size() + ") -----");
        students.forEach(student -> CustomLogger.logInfo(
                "Matricule: " + student.getMatricule() +
                        " | Branch: " + (student.getBranche() != null ? student.getBranche().getSpecialite() : "N/A") +
                        " | TP Group: " + (student.getTp() != null ? student.getTp().getId() : "N/A")
        ));

        // 5. Branches
        List<Branche> branches = brancheRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("\n----- Branches (" + branches.size() + ") -----");
        branches.forEach(branch -> CustomLogger.logInfo(
                "Level: " + branch.getNiveau() +
                        " | Specialty: " + branch.getSpecialite() +
                        " | TDs: " + branch.getNbTD() +
                        " | Department: " + branch.getDepartement()
        ));

        // 6. Salles
        List<Salle> rooms = salleRepository.findAll().stream().limit(3).toList();
        CustomLogger.logInfo("\n----- Salles (" + rooms.size() + ") -----");
        rooms.forEach(room -> CustomLogger.logInfo(
                "ID: " + room.getIdentifiant() +
                        " | Type: " + room.getType() +
                        " | Capacity: " + room.getCapacite() +
                        " | Seances: " + (room.getSeances() != null ? room.getSeances().size() : 0)
        ));

        // 7. Seances
        List<Seance> sessions = seanceRepository.findAll().stream().limit(3).toList();
        CustomLogger.logInfo("\n----- Seances (" + sessions.size() + ") -----");
        sessions.forEach(session -> CustomLogger.logInfo(
                "Subject: " + session.getMatiere() +
                        " | Day: " + session.getJour() +
                        " | Time: " + session.getHeureDebut() + "-" + session.getHeureFin() +
                        " | Type: " + session.getFrequence()
        ));

        // 8. TDs
        List<TD> tds = tdRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("\n----- TDs (" + tds.size() + ") -----");
        tds.forEach(td -> CustomLogger.logInfo(
                "ID: " + td.getId() +
                        " | Group: " + td.getNb() +
                        " | TPs: " + td.getNbTP() +
                        " | Branch: " + (td.getBranche() != null ? td.getBranche().getNiveau() : "N/A")
        ));

        // 9. TPs
        List<TP> tps = tpRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("\n----- TPs (" + tps.size() + ") -----");
        tps.forEach(tp -> CustomLogger.logInfo(
                "ID: " + tp.getId() +
                        " | Group: " + tp.getNb() +
                        " | TD: " + (tp.getTd() != null ? tp.getTd().getId() : "N/A") +
                        " | Students: " + (tp.getEtudiants() != null ? tp.getEtudiants().size() : 0)
        ));

        // 10. Signals
        List<Signal> signals = signalRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("\n----- Signals (" + signals.size() + ") -----");
        signals.forEach(signal -> CustomLogger.logInfo(
                "ID: " + signal.getId() +
                        " | Severity: " + signal.getSeverity() +
                        " | Date: " + signal.getTimestamp() +
                        " | Teacher: " + (signal.getEnseignant() != null ? signal.getEnseignant().getCodeEnseignant() : "N/A")
        ));

        // 11. Propositions
        List<PropositionDeRattrapage> propositions = propositionDeRattrapageRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("\n----- Propositions (" + propositions.size() + ") -----");
        propositions.forEach(prop -> CustomLogger.logInfo(
                "ID: " + prop.getId() +
                        " | Date: " + prop.getDate() +
                        " | Status: " + prop.getStatus() +
                        " | Teacher: " + (prop.getEnseignant() != null ? prop.getEnseignant().getCodeEnseignant() : "N/A")
        ));

        // 12. Notifications
        List<Notification> notifications = notificationRepository.findAll().stream().limit(3).toList();
        CustomLogger.logInfo("\n----- Notifications (" + notifications.size() + ") -----");
        notifications.forEach(notif -> CustomLogger.logInfo(
                "ID: " + notif.getId() +
                        " | Type: " + notif.getType() +
                        " | Read: " + notif.isRead() +
                        " | Sender: " + (notif.getExpediteur() != null ? notif.getExpediteur().getCin() : "System") +
                        " | Receiver: " + (notif.getRecepteur() != null ? notif.getRecepteur().getNom() : "N/A")
        ));

        // 13. Fichiers
        List<FichierExcel> fichiers = fichierExcelRepository.findAll().stream().limit(2).toList();
        CustomLogger.logInfo("\n----- Fichiers (" + fichiers.size() + ") -----");
        fichiers.forEach(fichier -> CustomLogger.logInfo(
                "ID: " + fichier.getId() +
                        " | File: " + fichier.getFileName() +
                        " | Status: " + fichier.getStatus() +
                        " | Errors: " + String.join(", ", fichier.getErrors())
        ));

        CustomLogger.logInfo("============================= Retrieval Complete =====================");
    }


    @Transactional
    public void testRetrieveAndDelete() {
        CustomLogger.logInfo("=============================Deleting Sample Data====================");

        // Delete notifications
        List<Notification> notifications = notificationRepository.findAll().stream().limit(2).toList();
        notificationRepository.deleteAll(notifications);
        CustomLogger.logInfo("Deleted " + notifications.size() + " notifications");

        // Delete signals
        List<Signal> signals = signalRepository.findAll().stream().limit(2).toList();
        signalRepository.deleteAll(signals);
        CustomLogger.logInfo("Deleted " + signals.size() + " signals");

        // Delete fichiers
        List<FichierExcel> fichiers = fichierExcelRepository.findAll().stream().limit(1).toList();
        fichierExcelRepository.deleteAll(fichiers);
        CustomLogger.logInfo("Deleted " + fichiers.size() + " fichiers");
    }

    @Transactional
    public void testRetrieveAndModify() {
        CustomLogger.logInfo("==================== Modifying Sample Entities ====================");

        // 1. Modify Enseignants
        enseignantRepository.findAll().stream().limit(2).forEach(enseignant -> {
            CustomLogger.logInfo("\n----- Original Enseignant -----");
            CustomLogger.logInfo("Code: " + enseignant.getCodeEnseignant());
            CustomLogger.logInfo("Hours: " + enseignant.getHeures());
            CustomLogger.logInfo("Email: " + enseignant.getEmail());

            int newHours = enseignant.getHeures() + 5;
            enseignant.setHeures(newHours);
            enseignantRepository.save(enseignant);

            CustomLogger.logInfo("----- Modified Enseignant -----");
            CustomLogger.logInfo("New hours: " + enseignant.getHeures());
        });

        // 2. Modify Etudiants
        etudiantRepository.findAll().stream().limit(2).forEach(etudiant -> {
            CustomLogger.logInfo("\n----- Original Etudiant -----");
            CustomLogger.logInfo("Matricule: " + etudiant.getMatricule());
            CustomLogger.logInfo("Address: " + etudiant.getAdresse());

            String newAddress = "Updated Address " + LocalDateTime.now().getMinute();
            etudiant.setAdresse(newAddress);
            etudiantRepository.save(etudiant);

            CustomLogger.logInfo("----- Modified Etudiant -----");
            CustomLogger.logInfo("New address: " + etudiant.getAdresse());
        });

        // 3. Modify Seances
        seanceRepository.findAll().stream().limit(2).forEach(seance -> {
            CustomLogger.logInfo("\n----- Original Seance -----");
            CustomLogger.logInfo("Matiere: " + seance.getMatiere());
            CustomLogger.logInfo("Time: " + seance.getHeureDebut() + "-" + seance.getHeureFin());
            CustomLogger.logInfo("Salle: " + (seance.getSalle() != null ? seance.getSalle().getIdentifiant() : "None"));

            // Modify time
            LocalTime newStart = seance.getHeureDebut().plusMinutes(30);
            LocalTime newEnd = seance.getHeureFin().plusMinutes(30);
            seance.setHeureDebut(newStart);
            seance.setHeureFin(newEnd);
            seanceRepository.save(seance);

            CustomLogger.logInfo("----- Modified Seance -----");
            CustomLogger.logInfo("New time: " + seance.getHeureDebut() + "-" + seance.getHeureFin());
        });

        // 4. Modify Salles
        salleRepository.findAll().stream().limit(2).forEach(salle -> {
            CustomLogger.logInfo("\n----- Original Salle -----");
            CustomLogger.logInfo("ID: " + salle.getIdentifiant());
            CustomLogger.logInfo("Type: " + salle.getType());
            CustomLogger.logInfo("Capacity: " + salle.getCapacite());

            // Modify properties
            salle.setType("Modified Type");
            salle.setCapacite(salle.getCapacite() + 10);
            salleRepository.save(salle);

            CustomLogger.logInfo("----- Modified Salle -----");
            CustomLogger.logInfo("New type: " + salle.getType());
            CustomLogger.logInfo("New capacity: " + salle.getCapacite());
        });

        CustomLogger.logInfo("==================== Modification Complete ====================");
    }
    @Transactional
    public void testListFetch() {
        CustomLogger.logInfo("==================== Testing List Fetching ====================");

        // 1. Enseignant (Seances, Propositions, Signals)
        enseignantRepository.findAll().stream().limit(2).forEach(enseignant -> {
            CustomLogger.logInfo("\n----- Enseignant " + enseignant.getCodeEnseignant() + " -----");

            // Seances
            CustomLogger.logInfo("Seances (" + enseignant.getSeances().size() + "):");
            enseignant.getSeances().stream().limit(3).forEach(seance ->
                    CustomLogger.logInfo("- " + seance.getMatiere() + " | " +
                            seance.getHeureDebut() + "-" + seance.getHeureFin())
            );

            // Propositions
            CustomLogger.logInfo("Propositions (" + enseignant.getPropositionsDeRattrapage().size() + "):");
            enseignant.getPropositionsDeRattrapage().stream().limit(3).forEach(prop ->
                    CustomLogger.logInfo("- " + prop.getReason() + " | " + prop.getStatus())
            );

            // Signals
            CustomLogger.logInfo("Signals (" + enseignant.getSignals().size() + "):");
            enseignant.getSignals().stream().limit(3).forEach(signal ->
                    CustomLogger.logInfo("- " + signal.getMessage() + " | " + signal.getSeverity())
            );
        });

        // 2. Branche (Seances)
        brancheRepository.findAll().stream().limit(2).forEach(branche -> {
            CustomLogger.logInfo("\n----- Branche " + branche.getSpecialite() + " -----");

            CustomLogger.logInfo("Seances (" + branche.getSeances().size() + "):");
            branche.getSeances().stream().limit(3).forEach(seance ->
                    CustomLogger.logInfo("- "+ seance.getJour() +"- " + seance.getMatiere() + " | " +
                            seance.getHeureDebut() + "-" + seance.getHeureFin())
            );
        });

        // 3. Seance (Branches, TDs, TPs)
        seanceRepository.findAll().stream().limit(2).forEach(seance -> {
            CustomLogger.logInfo("\n----- Seance " + seance.getMatiere() + " -----");

            // Branches
            CustomLogger.logInfo("Branches (" + seance.getBranches().size() + "):");
            seance.getBranches().stream().limit(3).forEach(branche ->
                    CustomLogger.logInfo("- " + branche.getNiveau() + " " + branche.getSpecialite())
            );

            // TDs
            CustomLogger.logInfo("TDs (" + seance.getTds().size() + "):");
            seance.getTds().stream().limit(3).forEach(td ->
                    CustomLogger.logInfo("- TD" + td.getNb() + " | " + td.getBranche().getSpecialite())
            );

            // TPs
            CustomLogger.logInfo("TPs (" + seance.getTps().size() + "):");
            seance.getTps().stream().limit(3).forEach(tp ->
                    CustomLogger.logInfo("- TP" + tp.getNb() + " | " + tp.getTd().getNb())
            );
        });

        // 4. Salle (Seances)
        salleRepository.findAll().stream().limit(2).forEach(salle -> {
            CustomLogger.logInfo("\n----- Salle " + salle.getIdentifiant() + " -----");

            CustomLogger.logInfo("Seances (" + salle.getSeances().size() + "):");
            salle.getSeances().stream().limit(3).forEach(seance ->
                    CustomLogger.logInfo("- " + seance.getMatiere() + " | " +
                            seance.getHeureDebut() + "-" + seance.getHeureFin())
            );
        });

        // 5. TD (TPs, Seances)
        tdRepository.findAll().stream().limit(2).forEach(td -> {
            CustomLogger.logInfo("\n----- TD " + td.getNb() + " -----");

            // TPs
            CustomLogger.logInfo("TPs (" + td.getTpList().size() + "):");
            td.getTpList().stream().limit(3).forEach(tp ->
                    CustomLogger.logInfo("- TP" + tp.getNb() + " | Students: " + tp.getEtudiants().size())
            );

            // Seances
            CustomLogger.logInfo("Seances (" + td.getSeances().size() + "):");
            td.getSeances().stream().limit(3).forEach(seance ->
                    CustomLogger.logInfo("- " + seance.getMatiere() + " | " +
                            seance.getHeureDebut() + "-" + seance.getHeureFin())
            );
        });

        // 6. TP (Etudiants, Seances)
        tpRepository.findAll().stream().limit(2).forEach(tp -> {
            CustomLogger.logInfo("\n----- TP " + tp.getNb() + " -----");

            // Etudiants
            CustomLogger.logInfo("Etudiants (" + tp.getEtudiants().size() + "):");
            tp.getEtudiants().stream().limit(3).forEach(etudiant ->
                    CustomLogger.logInfo("- " + etudiant.getMatricule() + " | " +
                            etudiant.getNom() + " " + etudiant.getPrenom())
            );

            // Seances
            CustomLogger.logInfo("Seances (" + tp.getSeances().size() + "):");
            tp.getSeances().stream().limit(3).forEach(seance ->
                    CustomLogger.logInfo("- " + seance.getMatiere() + " | " +
                            seance.getHeureDebut() + "-" + seance.getHeureFin())
            );
        });

        // 7. FichierExcel (Errors)
        fichierExcelRepository.findAll().stream().limit(2).forEach(fichier -> {
            CustomLogger.logInfo("\n----- Fichier " + fichier.getFileName() + " -----");

            CustomLogger.logInfo("Errors (" + fichier.getErrors().size() + "):");
            fichier.getErrors().forEach(error ->
                    CustomLogger.logInfo("- " + error)
            );
        });

        CustomLogger.logInfo("==================== List Fetching Complete ====================");
    }

}package com.scheduling.universityschedule_backend.testingclasses;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.model.FrequenceType;
import com.scheduling.universityschedule_backend.model.Status;
import com.scheduling.universityschedule_backend.model.SeanceType;
import com.scheduling.universityschedule_backend.service.*;
import com.scheduling.universityschedule_backend.util.CustomLogger;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import java.time.*;
import java.util.*;
import java.util.function.Function;

import java.time.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Component
@Transactional
public class ServiceTest {

    private final AdministrateurService administrateurService;
    private final BrancheService brancheService;
    private final EtudiantService etudiantService;
    private final ExcelFileService excelFileService;
    private final SalleService salleService;
    private final SeanceService seanceService;
    private final EnseignantService enseignantService;
    private final TDService tdService;
    private final TPService tpService;
    private final NotificationService notificationService;


    public Random RANDOM = new Random();

    public ServiceTest(AdministrateurService administrateurService, BrancheService brancheService, EtudiantService etudiantService, ExcelFileService excelFileService, SalleService salleService, SeanceService seanceService, EnseignantService enseignantService, TDService tdService, TPService tpService, NotificationService notificationService) {
        this.administrateurService = administrateurService;
        this.brancheService = brancheService;
        this.etudiantService = etudiantService;
        this.excelFileService = excelFileService;
        this.salleService = salleService;
        this.seanceService = seanceService;
        this.enseignantService = enseignantService;
        this.tdService = tdService;
        this.tpService = tpService;
        this.notificationService = notificationService;
    }
    public void populateDatabase(int sampleSize) throws CustomException {
        CustomLogger.logInfo("========== Populating Database Using Service Layer ==========");

        // Random generators
        Random RANDOM = new Random();
        List<String> NOMS = Arrays.asList("Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller",
                "Wilson", "Moore", "Taylor", "Anderson", "Thomas", "Jackson", "White");
        List<String> PRENOMS = Arrays.asList("James", "Mary", "John", "Patricia", "Robert", "Jennifer", "Michael",
                "Linda", "William", "Elizabeth", "David", "Barbara", "Richard", "Susan");

        // Helper functions for random data
        Function<Void, String> generateRandomCin = v -> String.valueOf(100000000 + RANDOM.nextInt(900000000));
        Function<Void, String> generateRandomTel = v -> String.valueOf(1000000000L + RANDOM.nextLong(9000000000L));
        Function<Void, String> pickNom = v -> NOMS.get(RANDOM.nextInt(NOMS.size()));
        Function<Void, String> pickPrenom = v -> PRENOMS.get(RANDOM.nextInt(PRENOMS.size()));
        Function<Void, DayOfWeek> randomDay = v -> DayOfWeek.values()[RANDOM.nextInt(5)];
        Function<Void, String> randomDayString = v -> randomDay.apply(null).toString();
        Function<Void, LocalTime> randomTime = v -> LocalTime.of(8 + RANDOM.nextInt(9), RANDOM.nextInt(12) * 5);
        Function<LocalTime, LocalTime> randomTimeAfter = start -> start.plusMinutes(90 + RANDOM.nextInt(90));
        Function<Void, String> randomFrequenceString = v -> {
            FrequenceType[] freqs = FrequenceType.values();
            return freqs[RANDOM.nextInt(freqs.length)].toString();
        };
        Function<Void, String> pickSeanceType = v -> {
            SeanceType[] types = SeanceType.values();
            return types[RANDOM.nextInt(types.length)].toString();
        };
        Function<Void, String> pickRandomSubject = v -> {
            String[] subjects = {
                    "Mathematics", "Physics", "Chemistry", "Computer Architecture",
                    "Database Systems", "Operating Systems", "Data Structures",
                    "Algorithms", "Software Engineering", "Networks", "Artificial Intelligence"
            };
            return subjects[RANDOM.nextInt(subjects.length)];
        };

        Function<Void, String> pickNiveau = v -> {
            String[] systems = {"L", "CPI", "ING", "MR", "MP"};
            String system = systems[RANDOM.nextInt(systems.length)];
            int yearLevel = switch (system) {
                case "L" -> RANDOM.nextInt(3) + 1;
                case "CPI" -> RANDOM.nextInt(2) + 1;
                case "ING" -> RANDOM.nextInt(3) + 1;
                default -> RANDOM.nextInt(2) + 1;
            };
            return system + yearLevel;
        };

        Function<String, String> pickSpecialty = niveau -> {
            if (niveau.startsWith("L")) return Arrays.asList("EEA", "INFO", "TIC", "MATH").get(RANDOM.nextInt(4));
            if (niveau.startsWith("CPI")) return "INFO";
            if (niveau.startsWith("ING")) return Arrays.asList("ELEC", "INFO").get(RANDOM.nextInt(2));
            return Arrays.asList("GL", "I3", "DS").get(RANDOM.nextInt(3));
        };

        // 1. Create Administrateurs
        List<AdministrateurDTO> admins = new ArrayList<>();
        for (int i = 0; i < Math.max(1, sampleSize / 5); i++) {
            AdministrateurDTO admin = new AdministrateurDTO();
            admin.setCin(generateRandomCin.apply(null));
            admin.setNom(pickNom.apply(null));
            admin.setPrenom(pickPrenom.apply(null));
            admin.setEmail("admin" + i + "@example.com");
            admin.setTel(generateRandomTel.apply(null));
            admin.setAdresse("Admin Address " + i);
            admin.setCodeAdmin("ADM" + i);
            admins.add(administrateurService.create(admin));
        }
        CustomLogger.logInfo("Created Administrators: " + admins.size());

        // 2. Create Enseignants
        List<EnseignantDTO> enseignants = new ArrayList<>();
        for (int i = 0; i < sampleSize; i++) {
            EnseignantDTO enseignant = new EnseignantDTO();
            enseignant.setCin(generateRandomCin.apply(null));
            enseignant.setNom(pickNom.apply(null));
            enseignant.setPrenom(pickPrenom.apply(null));
            enseignant.setEmail("enseignant" + i + "@example.com");
            enseignant.setTel(generateRandomTel.apply(null));
            enseignant.setAdresse("Teacher Address " + i);
            enseignant.setCodeEnseignant("ENS" + i);
            enseignant.setHeures((int)(Math.random() * 40) + 1);
            enseignants.add(enseignantService.create(enseignant));
        }
        CustomLogger.logInfo("Created Teachers: " + enseignants.size());

        // 3. Create Branches
        List<BrancheDTO> branches = new ArrayList<>();
        for (int i = 0; i < Math.max(1, sampleSize / 15); i++) {
            BrancheDTO branche = new BrancheDTO();
            String niveau = pickNiveau.apply(null);
            branche.setNiveau(niveau);
            branche.setSpecialite(pickSpecialty.apply(niveau));
            branche.setNbTD((int)(Math.random() * 5) + 1);
            branche.setDepartement(Math.random() < 0.33 ? "Technologie" : "informatique");
            branches.add(brancheService.create(branche));
        }
        CustomLogger.logInfo("Created Branches: " + branches.size());

        // 4. Create TDs
        List<TDDTO> tds = new ArrayList<>();
        for (int i = 0; i < Math.max(2, (sampleSize * 3) / 20); i++) {
            TDDTO td = new TDDTO();
            td.setNb((int)(Math.random() * 5) + 1);
            td.setNbTP((int)(Math.random() * 3) + 1);
            td.setBrancheId(branches.get(RANDOM.nextInt(branches.size())).getId());
            tds.add(tdService.create(td));
        }
        CustomLogger.logInfo("Created TDs: " + tds.size());

        // 5. Create TPs
        List<TPDTO> tps = new ArrayList<>();
        for (int i = 0; i < Math.max(3, sampleSize / 3); i++) {
            TPDTO tp = new TPDTO();
            tp.setNb((int)(Math.random() * 3) + 1);
            tp.setTdId(tds.get(RANDOM.nextInt(tds.size())).getId());
            tps.add(tpService.create(tp));
        }
        CustomLogger.logInfo("Created TPs: " + tps.size());

        // 6. Create Etudiants
        List<EtudiantDTO> etudiants = new ArrayList<>();
        for (int i = 0; i < sampleSize * 3; i++) {
            EtudiantDTO etudiant = new EtudiantDTO();
            etudiant.setCin(generateRandomCin.apply(null));
            etudiant.setNom(pickNom.apply(null));
            etudiant.setPrenom(pickPrenom.apply(null));
            etudiant.setEmail("etudiant" + i + "@example.com");
            etudiant.setTel(generateRandomTel.apply(null));
            etudiant.setAdresse("Student Address " + i);
            etudiant.setMatricule("MAT" + i);
            etudiant.setBrancheId(branches.get(RANDOM.nextInt(branches.size())).getId());
            etudiant.setTpId(tps.get(RANDOM.nextInt(tps.size())).getId());
            etudiants.add(etudiantService.create(etudiant));
        }
        CustomLogger.logInfo("Created Students: " + etudiants.size());

        // 7. Create Salles
        List<SalleDTO> salles = new ArrayList<>();
        for (int i = 0; i < Math.max(3, sampleSize / 10); i++) {
            SalleDTO salle = new SalleDTO();
            salle.setIdentifiant("SAL" + i);
            salle.setType("Lecture Hall");
            salle.setCapacite((int)(Math.random() * 150) + 50);
            salles.add(salleService.create(salle));
        }
        CustomLogger.logInfo("Created Rooms: " + salles.size());

        // 8. Create Seances (without conflict detection)
        List<SeanceDTO> seances = new ArrayList<>();
        for (int i = 0; i < sampleSize * 2; i++) {
            SeanceDTO seance = new SeanceDTO();
            seance.setMatiere(pickRandomSubject.apply(null));
            seance.setJour(randomDayString.apply(null));

            LocalTime startTime = randomTime.apply(null);
            LocalTime endTime = randomTimeAfter.apply(startTime);
            seance.setHeureDebut(startTime.toString());
            seance.setHeureFin(endTime.toString());

            seance.setFrequence(randomFrequenceString.apply(null));
            seance.setType(pickSeanceType.apply(null));

            if (seance.getFrequence().equals("CATCHUP")) {
                seance.setDate(LocalDate.now().plusDays(i % 14).toString());
            }

            seance.setSalleId(salles.get(RANDOM.nextInt(salles.size())).getId());
            seance.setEnseignantId(enseignants.get(RANDOM.nextInt(enseignants.size())).getId());

            // Add related entities (branches, TDs, TPs)
            List<Long> brancheIds = new ArrayList<>();
            brancheIds.add(branches.get(RANDOM.nextInt(branches.size())).getId());
            seance.setBrancheIds(brancheIds);

            List<Long> tdIds = new ArrayList<>();
            tdIds.add(tds.get(RANDOM.nextInt(tds.size())).getId());
            seance.setTdIds(tdIds);

            List<Long> tpIds = new ArrayList<>();
            tpIds.add(tps.get(RANDOM.nextInt(tps.size())).getId());
            seance.setTpIds(tpIds);

            // Create without checking conflicts
            try {
                seances.add(seanceService.create(seance));
            } catch (Exception e) {
                CustomLogger.logError("Failed to create seance " + i + ": " + e.getMessage());
            }
        }
        CustomLogger.logInfo("Created Sessions: " + seances.size());

// 9. Create Makeup Session Proposals
        for (int i = 0; i < Math.max(1, sampleSize / 3); i++) {
            try {
                PropositionDeRattrapageDTO proposition = new PropositionDeRattrapageDTO();
                proposition.setName("Makeup Session " + i);
                proposition.setMatiere(pickRandomSubject.apply(null));
                proposition.setType(pickSeanceType.apply(null));

                LocalTime startTime = randomTime.apply(null);
                LocalTime endTime = randomTimeAfter.apply(startTime);
                proposition.setHeureDebut(startTime.toString());
                proposition.setHeureFin(endTime.toString());

                LocalDateTime proposalDate = LocalDateTime.now().plusDays(RANDOM.nextInt(14));
                proposition.setDate(proposalDate.toString());
                proposition.setStatus(Status.PENDING.name());

                // Add random reason
                String[] reasons = {
                        "Previous session cancelled due to emergency",
                        "Holiday makeup session",
                        "Extra practice needed before exam",
                        "Schedule conflict resolution"
                };
                proposition.setReason(reasons[RANDOM.nextInt(reasons.length)]);

                // Add related entities
                Long teacherId = enseignants.get(RANDOM.nextInt(enseignants.size())).getId();
                proposition.setEnseignantId(teacherId);

                List<Long> brancheIds;
                brancheIds = new ArrayList<>();
                brancheIds.add(branches.get(RANDOM.nextInt(branches.size())).getId());
                proposition.setBrancheIds(brancheIds);

                List<Long> tdIds = new ArrayList<>();
                tdIds.add(tds.get(RANDOM.nextInt(tds.size())).getId());
                proposition.setTdIds(tdIds);

                List<Long> tpIds = new ArrayList<>();
                tpIds.add(tps.get(RANDOM.nextInt(tps.size())).getId());
                proposition.setTpIds(tpIds);

                enseignantService.submitMakeupRequest(teacherId, proposition);
            } catch (Exception e) {
                CustomLogger.logError("Failed to create makeup proposal: " + e.getMessage());
            }
        }
        // 10. Create Signals
        int signalcount=0;
        for (int i = 0; i < Math.max(1, sampleSize / 3); i++) {
            try {
                SignalDTO signal = new SignalDTO();
                signal.setMessage("Signal Issue " + i);
                signal.setSeverity(Math.random() > 0.5 ? "High" : "Low");
                signal.setTimestamp(LocalDateTime.parse(LocalDateTime.now().toString()));

                Long teacherId = enseignants.get(RANDOM.nextInt(enseignants.size()-1)).getId();
                signal.setEnseignantId(String.valueOf(teacherId));
                CustomLogger.logInfo(signal.toString());

                enseignantService.submitSignal(teacherId, signal);
                signalcount++;
            } catch (Exception e) {
                CustomLogger.logError("Failed to create signal: " + e.getMessage());
            }
        }
        CustomLogger.logInfo("Created Signals: " + signalcount);
// 11. Create Notifications
        for (int i = 0; i < sampleSize * 2; i++) {
            try {
                NotificationDTO notification = new NotificationDTO();
                notification.setMessage("Notification message " + i);
                notification.setType(RANDOM.nextBoolean() ? "SCHEDULE_CHANGE" : "ANNOUNCEMENT");
                notification.setDate(LocalDateTime.now().minusHours(RANDOM.nextInt(48)));
                notification.setIsread(RANDOM.nextInt(10) < 3); // 30% read, 70% unread

                // Determine sender (admin) and receiver (can be enseignant, student, etc.)
                Long senderId = admins.get(RANDOM.nextInt(admins.size())).getId();

                // Vary recipients between teachers and students
                Long recipientId;
                if (RANDOM.nextBoolean()) {
                    // Teacher as recipient
                    recipientId = enseignants.get(RANDOM.nextInt(enseignants.size())).getId();

                    // Set type for teacher notifications
                    if (RANDOM.nextBoolean()) {
                        notification.setType("SCHEDULE_CHANGE");
                        notification.setMessage("Your session on " +
                                DayOfWeek.values()[RANDOM.nextInt(5)] + " has been " +
                                (RANDOM.nextBoolean() ? "rescheduled" : "cancelled"));
                    }
                } else {
                    // Student as recipient
                    recipientId = etudiants.get(RANDOM.nextInt(etudiants.size())).getId();

                    // Set type for student notifications
                    if (RANDOM.nextBoolean()) {
                        notification.setType("COURSE_MATERIAL");
                        notification.setMessage("New material available for " + pickRandomSubject.apply(null));
                    }
                }

                notification.setExpediteurId(senderId);
                notification.setRecepteurId(recipientId);

                // Here we assume the notification service has a create method
                // If there is a specific method for sending notifications, use that instead
                notificationService.create(notification);

            } catch (Exception e) {
                CustomLogger.logError("Failed to create notification: " + e.getMessage());
            }
        }
        CustomLogger.logInfo("Created Notifications: " + sampleSize * 2);
        // 12. FichierExcel (for bulk imports)
        for (int i = 0; i < Math.max(1, sampleSize / 5); i++) {
            try {
                FichierExcelDTO fichier = new FichierExcelDTO();
                fichier.setFileName("schedule_" + i + ".xlsx");
                fichier.setStatus("Imported");
                fichier.setErrors(List.of("No errors"));
                fichier.setImportDate(LocalDateTime.parse(LocalDateTime.now().toString()));

                excelFileService.create(fichier);
            } catch (Exception e) {
                CustomLogger.logError("Failed to create excel file record: " + e.getMessage());
            }
        }
        CustomLogger.logInfo("========== Database Population Complete ==========");
    }
    public void debugrud() throws CustomException {
        CustomLogger.logInfo("========== Debugging functions ==========");
        // Testing AdministrateurService
        try {
            CustomLogger.logInfo("Testing AdministrateurService RUD operations...");
            List<AdministrateurDTO> allAdmins = administrateurService.findAll();
            if (allAdmins.size() >= 2) {
                // Get 2 random admins
                int index1 = RANDOM.nextInt(allAdmins.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allAdmins.size() - 1)) % allAdmins.size();
                AdministrateurDTO admin1 = allAdmins.get(index1);
                AdministrateurDTO admin2 = allAdmins.get(index2);

                // Test findById
                AdministrateurDTO fetchedAdmin1 = administrateurService.findById(admin1.getId());
                AdministrateurDTO fetchedAdmin2 = administrateurService.findById(admin2.getId());

                // Test update
                CustomLogger.logInfo("Admin to be updated ID : " + fetchedAdmin1.getId().toString() + "| object:  " + fetchedAdmin2);
                fetchedAdmin1.setNom("Updated Name");
                AdministrateurDTO updatedAdmin = administrateurService.update(fetchedAdmin1.getId(), fetchedAdmin1);
                CustomLogger.logInfo("Updated admin ID: " + updatedAdmin.getId().toString()+ " " + updatedAdmin);

                // Test delete
                CustomLogger.logInfo("Admin to be deleted: ID " + fetchedAdmin2.getId().toString() + "| object:  " + fetchedAdmin2);
                administrateurService.delete(admin2.getId());

                CustomLogger.logInfo("AdministrateurService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough administrators for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing AdministrateurService: " + e.getMessage(), e);
        }

        // Testing BrancheService
        try {
            CustomLogger.logInfo("Testing BrancheService RUD operations...");
            List<BrancheDTO> allBranches = brancheService.findAll();
            if (allBranches.size() >= 2) {
                // Get 2 random branches
                int index1 = RANDOM.nextInt(allBranches.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allBranches.size() - 1)) % allBranches.size();
                BrancheDTO branche1 = allBranches.get(index1);
                BrancheDTO branche2 = allBranches.get(index2);

                // Test findById
                BrancheDTO fetchedBranche1 = brancheService.findById(branche1.getId());
                BrancheDTO fetchedBranche2 = brancheService.findById(branche2.getId());

                // Test update
                CustomLogger.logInfo("Branch to be updated: " + fetchedBranche1);
                fetchedBranche1.setDepartement("Updated Department");
                BrancheDTO updatedBranche = brancheService.update(fetchedBranche1.getId(), fetchedBranche1);
                CustomLogger.logInfo("Updated branch: " + updatedBranche);

                // Test delete
                CustomLogger.logInfo("Branch to be deleted: " + fetchedBranche2);
                brancheService.delete(branche2.getId());

                CustomLogger.logInfo("BrancheService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough branches for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing BrancheService: " + e.getMessage(), e);
        }

        CustomLogger.logInfo("========== End Debugging functions ==========");
    }
    public void rudTest() throws CustomException {
        CustomLogger.logInfo("========== Testing Retrieval, Update, Delete Operations ==========");

        // Testing AdministrateurService
        try {
            CustomLogger.logInfo("Testing AdministrateurService RUD operations...");
            List<AdministrateurDTO> allAdmins = administrateurService.findAll();
            if (allAdmins.size() >= 2) {
                // Get 2 random admins
                int index1 = RANDOM.nextInt(allAdmins.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allAdmins.size() - 1)) % allAdmins.size();
                AdministrateurDTO admin1 = allAdmins.get(index1);
                AdministrateurDTO admin2 = allAdmins.get(index2);

                // Test findById
                AdministrateurDTO fetchedAdmin1 = administrateurService.findById(admin1.getId());
                AdministrateurDTO fetchedAdmin2 = administrateurService.findById(admin2.getId());

                // Test update
                CustomLogger.logInfo("Admin to be updated: " + fetchedAdmin1);
                fetchedAdmin1.setNom("Updated Name");
                AdministrateurDTO updatedAdmin = administrateurService.update(fetchedAdmin1.getId(), fetchedAdmin1);
                CustomLogger.logInfo("Updated admin: " + updatedAdmin);

                // Test delete
                CustomLogger.logInfo("Admin to be deleted: " + fetchedAdmin2);
                administrateurService.delete(admin2.getId());

                CustomLogger.logInfo("AdministrateurService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough administrators for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing AdministrateurService: " + e.getMessage(), e);
        }

        // Testing BrancheService
        try {
            CustomLogger.logInfo("Testing BrancheService RUD operations...");
            List<BrancheDTO> allBranches = brancheService.findAll();
            if (allBranches.size() >= 2) {
                // Get 2 random branches
                int index1 = RANDOM.nextInt(allBranches.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allBranches.size() - 1)) % allBranches.size();
                BrancheDTO branche1 = allBranches.get(index1);
                BrancheDTO branche2 = allBranches.get(index2);

                // Test findById
                BrancheDTO fetchedBranche1 = brancheService.findById(branche1.getId());
                BrancheDTO fetchedBranche2 = brancheService.findById(branche2.getId());

                // Test update
                CustomLogger.logInfo("Branch to be updated: " + fetchedBranche1);
                fetchedBranche1.setDepartement("Updated Department");
                BrancheDTO updatedBranche = brancheService.update(fetchedBranche1.getId(), fetchedBranche1);
                CustomLogger.logInfo("Updated branch: " + updatedBranche);

                // Test delete
                CustomLogger.logInfo("Branch to be deleted: " + fetchedBranche2);
                brancheService.delete(branche2.getId());

                CustomLogger.logInfo("BrancheService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough branches for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing BrancheService: " + e.getMessage(), e);
        }

        // Testing EnseignantService
        try {
            CustomLogger.logInfo("Testing EnseignantService RUD operations...");
            List<EnseignantDTO> allTeachers = enseignantService.findAll();
            if (allTeachers.size() >= 2) {
                // Get 2 random teachers
                int index1 = RANDOM.nextInt(allTeachers.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allTeachers.size() - 1)) % allTeachers.size();
                EnseignantDTO teacher1 = allTeachers.get(index1);
                EnseignantDTO teacher2 = allTeachers.get(index2);

                // Test findById
                EnseignantDTO fetchedTeacher1 = enseignantService.findById(teacher1.getId());
                EnseignantDTO fetchedTeacher2 = enseignantService.findById(teacher2.getId());

                // Test update
                CustomLogger.logInfo("Teacher to be updated: " + fetchedTeacher1);
                fetchedTeacher1.setHeures(fetchedTeacher1.getHeures() + 5);
                EnseignantDTO updatedTeacher = enseignantService.update(fetchedTeacher1.getId(), fetchedTeacher1);
                CustomLogger.logInfo("Updated teacher: " + updatedTeacher);

                // Test delete
                CustomLogger.logInfo("Teacher to be deleted: " + fetchedTeacher2);
                enseignantService.delete(teacher2.getId());

                CustomLogger.logInfo("EnseignantService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough teachers for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing EnseignantService: " + e.getMessage(), e);
        }

        // Testing EtudiantService
        try {
            CustomLogger.logInfo("Testing EtudiantService RUD operations...");
            List<EtudiantDTO> allStudents = etudiantService.findAll();
            if (allStudents.size() >= 2) {
                // Get 2 random students
                int index1 = RANDOM.nextInt(allStudents.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allStudents.size() - 1)) % allStudents.size();
                EtudiantDTO student1 = allStudents.get(index1);
                EtudiantDTO student2 = allStudents.get(index2);

                // Test findById
                EtudiantDTO fetchedStudent1 = etudiantService.findById(student1.getId());
                EtudiantDTO fetchedStudent2 = etudiantService.findById(student2.getId());

                // Test update
                CustomLogger.logInfo("Student to be updated: " + fetchedStudent1);
                fetchedStudent1.setEmail("updated.email" + RANDOM.nextInt(100) + "@example.com");
                EtudiantDTO updatedStudent = etudiantService.update(fetchedStudent1.getId(), fetchedStudent1);
                CustomLogger.logInfo("Updated student: " + updatedStudent);

                // Test delete
                CustomLogger.logInfo("Student to be deleted: " + fetchedStudent2);
                etudiantService.delete(student2.getId());

                CustomLogger.logInfo("EtudiantService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough students for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing EtudiantService: " + e.getMessage(), e);
        }

        // Testing SalleService
        try {
            CustomLogger.logInfo("Testing SalleService RUD operations...");
            List<SalleDTO> allRooms = salleService.findAll();
            if (allRooms.size() >= 2) {
                // Get 2 random rooms
                int index1 = RANDOM.nextInt(allRooms.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allRooms.size() - 1)) % allRooms.size();
                SalleDTO room1 = allRooms.get(index1);
                SalleDTO room2 = allRooms.get(index2);

                // Test findById
                SalleDTO fetchedRoom1 = salleService.findById(room1.getId());
                SalleDTO fetchedRoom2 = salleService.findById(room2.getId());

                // Test update
                CustomLogger.logInfo("Room to be updated: " + fetchedRoom1);
                fetchedRoom1.setCapacite(fetchedRoom1.getCapacite() + 10);
                SalleDTO updatedRoom = salleService.update(fetchedRoom1.getId(), fetchedRoom1);
                CustomLogger.logInfo("Updated room: " + updatedRoom);

                // Test delete
                CustomLogger.logInfo("Room to be deleted: " + fetchedRoom2);
                salleService.delete(room2.getId());

                CustomLogger.logInfo("SalleService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough rooms for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing SalleService: " + e.getMessage(), e);
        }

        // Testing SeanceService
        try {
            CustomLogger.logInfo("Testing SeanceService RUD operations...");
            List<SeanceDTO> allSessions = seanceService.findAll();
            if (allSessions.size() >= 2) {
                // Get 2 random sessions
                int index1 = RANDOM.nextInt(allSessions.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allSessions.size() - 1)) % allSessions.size();
                SeanceDTO session1 = allSessions.get(index1);
                SeanceDTO session2 = allSessions.get(index2);

                // Test findById
                SeanceDTO fetchedSession1 = seanceService.findById(session1.getId());
                SeanceDTO fetchedSession2 = seanceService.findById(session2.getId());

                // Test update
                CustomLogger.logInfo("Session to be updated: " + fetchedSession1);
                fetchedSession1.setMatiere("Updated Subject " + RANDOM.nextInt(100));
                SeanceDTO updatedSession = seanceService.update(fetchedSession1.getId(), fetchedSession1);
                CustomLogger.logInfo("Updated session: " + updatedSession);

                // Test delete
                CustomLogger.logInfo("Session to be deleted: " + fetchedSession2);
                seanceService.delete(session2.getId());

                CustomLogger.logInfo("SeanceService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough sessions for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing SeanceService: " + e.getMessage(), e);
        }

        // Testing TDService
        try {
            CustomLogger.logInfo("Testing TDService RUD operations...");
            List<TDDTO> allTDs = tdService.findAll();
            if (allTDs.size() >= 2) {
                // Get 2 random TDs
                int index1 = RANDOM.nextInt(allTDs.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allTDs.size() - 1)) % allTDs.size();
                TDDTO td1 = allTDs.get(index1);
                TDDTO td2 = allTDs.get(index2);

                // Test findById
                TDDTO fetchedTD1 = tdService.findById(td1.getId());
                TDDTO fetchedTD2 = tdService.findById(td2.getId());

                // Test update
                CustomLogger.logInfo("TD to be updated: " + fetchedTD1);
                fetchedTD1.setNb(fetchedTD1.getNb() + 1);
                TDDTO updatedTD = tdService.update(fetchedTD1.getId(), fetchedTD1);
                CustomLogger.logInfo("Updated TD: " + updatedTD);

                // Test delete
                CustomLogger.logInfo("TD to be deleted: " + fetchedTD2);
                tdService.delete(td2.getId());

                CustomLogger.logInfo("TDService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough TDs for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing TDService: " + e.getMessage(), e);
        }

        // Testing TPService
        try {
            CustomLogger.logInfo("Testing TPService RUD operations...");
            List<TPDTO> allTPs = tpService.findAll();
            if (allTPs.size() >= 2) {
                // Get 2 random TPs
                int index1 = RANDOM.nextInt(allTPs.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allTPs.size() - 1)) % allTPs.size();
                TPDTO tp1 = allTPs.get(index1);
                TPDTO tp2 = allTPs.get(index2);

                // Test findById
                TPDTO fetchedTP1 = tpService.findById(tp1.getId());
                TPDTO fetchedTP2 = tpService.findById(tp2.getId());

                // Test update
                CustomLogger.logInfo("TP to be updated: " + fetchedTP1);
                fetchedTP1.setNb(fetchedTP1.getNb() + 1);
                TPDTO updatedTP = tpService.update(fetchedTP1.getId(), fetchedTP1);
                CustomLogger.logInfo("Updated TP: " + updatedTP);

                // Test delete
                CustomLogger.logInfo("TP to be deleted: " + fetchedTP2);
                tpService.delete(tp2.getId());

                CustomLogger.logInfo("TPService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough TPs for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing TPService: " + e.getMessage(), e);
        }

        // Testing NotificationService
        try {
            CustomLogger.logInfo("Testing NotificationService RUD operations...");
            List<NotificationDTO> allNotifications = notificationService.findAll();
            if (allNotifications.size() >= 2) {
                // Get 2 random notifications
                int index1 = RANDOM.nextInt(allNotifications.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allNotifications.size() - 1)) % allNotifications.size();
                NotificationDTO notification1 = allNotifications.get(index1);
                NotificationDTO notification2 = allNotifications.get(index2);

                // Test findById
                NotificationDTO fetchedNotification1 = notificationService.findById(notification1.getId());
                NotificationDTO fetchedNotification2 = notificationService.findById(notification2.getId());

                // Test update
                CustomLogger.logInfo("Notification to be updated: " + fetchedNotification1);
                fetchedNotification1.setMessage("Updated message " + RANDOM.nextInt(100));
                NotificationDTO updatedNotification = notificationService.update(fetchedNotification1.getId(), fetchedNotification1);
                CustomLogger.logInfo("Updated notification: " + updatedNotification);

                // Test delete
                CustomLogger.logInfo("Notification to be deleted: " + fetchedNotification2);
                notificationService.delete(notification2.getId());

                CustomLogger.logInfo("NotificationService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough notifications for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing NotificationService: " + e.getMessage(), e);
        }

        // Testing ExcelFileService
        try {
            CustomLogger.logInfo("Testing ExcelFileService RUD operations...");
            List<FichierExcelDTO> allFiles = excelFileService.findAll();
            if (allFiles.size() >= 2) {
                // Get 2 random files
                int index1 = RANDOM.nextInt(allFiles.size());
                int index2 = (index1 + 1 + RANDOM.nextInt(allFiles.size() - 1)) % allFiles.size();
                FichierExcelDTO file1 = allFiles.get(index1);
                FichierExcelDTO file2 = allFiles.get(index2);

                // Test findById
                FichierExcelDTO fetchedFile1 = excelFileService.findById(file1.getId());
                FichierExcelDTO fetchedFile2 = excelFileService.findById(file2.getId());

                // Test update
                CustomLogger.logInfo("Excel file to be updated: " + fetchedFile1);
                fetchedFile1.setStatus("Updated Status");
                FichierExcelDTO updatedFile = excelFileService.update(fetchedFile1.getId(), fetchedFile1);
                CustomLogger.logInfo("Updated excel file: " + updatedFile);

                // Test delete
                CustomLogger.logInfo("Excel file to be deleted: " + fetchedFile2);
                excelFileService.delete(file2.getId());

                CustomLogger.logInfo("ExcelFileService RUD operations completed successfully");
            } else {
                CustomLogger.logInfo("Not enough excel files for RUD testing");
            }
        } catch (Exception e) {
            CustomLogger.logError("Error testing ExcelFileService: " + e.getMessage(), e);
        }

        CustomLogger.logInfo("========== RUD Testing Complete ==========");
    }

}
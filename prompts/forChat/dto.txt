package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * Data Transfer Object for Administrateur entity.
 * Extends PersonneDTO to include additional attributes specific to an Administrator.
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class AdministrateurDTO extends PersonneDTO {
    private String codeAdmin;  // Unique code for the administrator
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.util.List;

/**
 * Batch Data Transfer Object.
 ** This DTO is designed for batch operations, primarily for responses.
 * Typically, the request payload comprises a list of full DTOs.
 * In response, this DTO returns a list of processed resource IDs along with additional metadata.
 * * Fields:
 * - ids: A list of Long resource IDs that have been processed.
 * - message: A message describing the result of the batch operation.
 * - success: A flag indicating whether the batch operation was successful.
 * - entityType: A property specifying the type of resource IDs (e.g., "Seance", "Branche").
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BatchDTO {
    private List<Long> ids;
    private String message;
    private boolean success;
    private String entityType;
    
}
package com.scheduling.universityschedule_backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;

/**
 * Data Transfer Object for Branche entity.
 * Represents an academic program or specialization.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BrancheDTO {
    private Long id;           // Unique identifier for the Branche
    private String niveau;     // Level of study (e.g., undergraduate, graduate)
    private String specialite; // Specialization or major
    private int nbTD;          // Number of tutorial sessions
    private String departement;// Associated department

    // List of Seance IDs associated with this Branche
    private List<Long> seanceIds;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import lombok.EqualsAndHashCode;
import java.util.List;

/**
 * Data Transfer Object for Enseignant entity.
 * Extends PersonneDTO to include additional attributes specific to a Teacher.
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class EnseignantDTO extends PersonneDTO {
    private String codeEnseignant;  // Unique code for the teacher
    private int heures;             // Total teaching hours

    // List of Seance IDs representing sessions taught by the teacher
    private List<Long> seanceIds;

    // List of PropositionDeRattrapage IDs representing proposed catch-up sessions
    private List<Long> propositionIds;

    private List<Long> signalIds;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * Data Transfer Object for Etudiant entity.
 * Extends PersonneDTO to include additional attributes specific to a Student.
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class EtudiantDTO extends PersonneDTO {
    private String matricule;  // Student ID

    // ID of the associated Branche representing the student's program or specialization
    private Long brancheId;

    // ID of the associated TP representing the student's practical session
    private Long tpId;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Data Transfer Object for FichierExcel entity.
 * Represents scheduling data imported into the system.
 */
@Data
public class FichierExcelDTO {
    private Long id;               // Unique identifier for the file
    private String fileName;       // Name of the Excel file
    private String status;         // Import status (e.g., successful, failed)

    // List of errors encountered during import
    private List<String> errors;

    private LocalDateTime importDate;  // Date and time of import
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import java.time.LocalDateTime;

/**
 * Data Transfer Object for Notification entity.
 * Represents messages sent to users about schedule changes, announcements, or alerts.
 */
@Data
public class NotificationDTO {
    private Long id;                // Unique identifier for the notification
    private String message;         // Content of the notification
    private LocalDateTime date;     // Date and time the notification was sent
    private String type;            // Type of notification (e.g., update, alert, reminder)
    private Boolean isread;           // Indicates if the notification has been read

    // ID of the recipient (Personne)
    private Long recepteurId;

    // ID of the sender (Personne or system)
    private Long expediteurId;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;

/**
 * Base Data Transfer Object for Personne entity.
 * Represents common attributes for all individuals within the system.
 */
@Data
public class PersonneDTO {
    private Long id;       // Unique identifier for the person
    private String cin;    // National identification number
    private String nom;    // Last name
    private String prenom; // First name
    private String email;  // Contact email
    private String tel;    // Telephone number
    private String adresse;// Physical address
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import java.time.LocalDateTime;

/**
 * Data Transfer Object for PropositionDeRattrapage entity.
 * Represents a proposal submitted by a teacher to schedule a make-up session.
 */
@Data
public class PropositionDeRattrapageDTO {
    private Long id;               // Unique identifier for the proposal
    private LocalDateTime date;    // Proposed date for the catch-up session
    private String reason;         // Explanation for the catch-up session
    private String status;         // Current status of the proposal (e.g., pending, approved, rejected)

    // ID of the associated Enseignant who proposed the catch-up session
    private Long enseignantId;
}
package com.scheduling.universityschedule_backend.dto;

import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import lombok.Data;
import java.util.List;

/**
 * Data Transfer Object for Salle entity.
 * Represents a physical classroom or lab space.
 */
@Data
public class SalleDTO {
    private Long id;             // Unique identifier for the room
    private String identifiant;  // Room identifier
    private String type;         // Room type (e.g., lecture hall, lab)
    private int capacite;        // Capacity of the room

    // List of available time slots for the room
    private List<String> disponibilite;

    // List of Seance IDs representing sessions scheduled in the room
    private List<Long> seanceIds;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SeanceConflictDTO {
    private Long seance1Id;          // ID of the first conflicting session
    private Long seance2Id;          // ID of the second conflicting session
    private List<String> conflictTypes; // List of conflict types
}package com.scheduling.universityschedule_backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;

/**
 * Data Transfer Object for Seance entity.
 * Represents a scheduled teaching session (lecture, tutorial, practical).
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SeanceDTO {
    private Long id;            // Unique identifier for the session
    private String jour;        // Day of the session
    private String heureDebut;  // Start time of the session
    private String heureFin;    // End time of the session
    private String type;        // Type of session (e.g., CR, CI, TD, TP)
    private String matiere;     // Subject
    private String frequence;   // Frequency of the session (e.g., weekly, biweekly, specific date for catch-up)

    // ID of the Salle assigned to the session
    private Long salleId;

    // ID of the Enseignant assigned to the session
    private Long enseignantId;

    // List of Branche IDs associated with this session
    private List<Long> brancheIds;

    // List of TD IDs associated with this session
    private List<Long> tdIds;

    // List of TP IDs associated with this session
    private List<Long> tpIds;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SeanceRoomConflictDTO {
    private Long seance1Id;          // ID of the first conflicting session
    private Long seance2Id;          // ID of the second conflicting session
    private String conflictType;     // Type of conflict (e.g., "Room Conflict")
}package com.scheduling.universityschedule_backend.dto;

import com.scheduling.universityschedule_backend.model.Enseignant;
import lombok.Data;
import java.time.LocalDateTime;

/**
 * Data Transfer Object for Signal entity.
 * Represents a message sent by a teacher to report a problem or suggest a change regarding their schedule.
 */
@Data
public class SignalDTO {
    private Long id;                // Unique identifier for the signal
    private String message;         // Details of the issue or suggestion
    private String severity;        // Importance level
    private LocalDateTime timestamp;// Date and time the signal was submitted

    private String enseignantId;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SingleSeanceConflictDTO {
    private Long seanceId;          // ID of the session
    private List<String> conflictTypes; // List of conflict types
}package com.scheduling.universityschedule_backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;

/**
 * Data Transfer Object for TD entity.
 * Represents group tutorial sessions associated with a Branche.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TDDTO {
    private Long id;         // Unique identifier for the tutorial session
    private int nb;          // Number of tutorial sessions
    private int nbTP;        // Number of practical sessions associated

    // ID of the associated Branche representing the academic program or specialization
    private Long brancheId;

    // List of TP IDs representing practical sessions
    private List<Long> tpIds;

    private List<Long> seanceIds;
}
package com.scheduling.universityschedule_backend.dto;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * Data Transfer Object for Technicien entity.
 * Extends PersonneDTO to include additional attributes specific to a Technician.
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class TechnicienDTO extends PersonneDTO {
    private String codeTechnicien;  // Unique code for the technician
}
package com.scheduling.universityschedule_backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;

/**
 * Data Transfer Object for TP entity.
 * Represents hands-on practical or lab sessions.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TPDTO {
    private Long id;  // Unique identifier for the practical session
    private int nb;   // Number of practical sessions

    // ID of the associated TD representing the tutorial session
    private Long tdId;

    // List of Etudiant IDs representing students enrolled in the practical session
    private List<Long> etudiantIds;
    // List of Seances IDs representing Seances per TP
    private List<Long> seanceIds;

}

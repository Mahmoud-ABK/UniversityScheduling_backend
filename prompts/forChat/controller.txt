package com.scheduling.universityschedule_backend.controller;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.service.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

/**
 * REST Controller for administrator operations.
 * Handles endpoints related to schedule management, makeup sessions, and notifications.
 *
 * @author Mahmoud-ABK
 * @version 1.0
 * @since 2025-05-04
 */
@RestController
@RequestMapping("/api/admin")
public class AdministrateurController {

    private final AdministrateurService administrateurService;
    private final SeanceService seanceService;
    private final NotificationService notificationService;
    private final ExcelFileService excelFileService;

    @Autowired
    public AdministrateurController(
            AdministrateurService administrateurService,
            SeanceService seanceService,
            NotificationService notificationService,
            ExcelFileService excelFileService) {
        this.administrateurService = administrateurService;
        this.seanceService = seanceService;
        this.notificationService = notificationService;
        this.excelFileService = excelFileService;
    }

    // ============================
    //    Schedule Management
    // ============================

    @GetMapping("/seances")
    public ResponseEntity<List<SeanceDTO>> getAllSeances() throws CustomException {
        return ResponseEntity.ok(seanceService.findAll());
    }

    @GetMapping("/seances/{id}")
    public ResponseEntity<SeanceDTO> getSeanceById(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(seanceService.findById(id));
    }

    @PostMapping("/seances")
    public ResponseEntity<SeanceDTO> createSeance(@RequestBody SeanceDTO seanceDTO) throws CustomException {
        return ResponseEntity.ok(seanceService.create(seanceDTO));
    }

    @PutMapping("/seances/{id}")
    public ResponseEntity<SeanceDTO> updateSeance(@PathVariable Long id, @RequestBody SeanceDTO seanceDTO) throws CustomException {
        return ResponseEntity.ok(seanceService.update(id, seanceDTO));
    }

    @DeleteMapping("/seances/{id}")
    public ResponseEntity<Void> deleteSeance(@PathVariable Long id) throws CustomException {
        seanceService.delete(id);
        return ResponseEntity.ok().build();
    }

    // ============================
    //    Makeup Session Management
    // ============================

    @GetMapping("/makeup-sessions")
    public ResponseEntity<List<PropositionDeRattrapageDTO>> getAllMakeupSessions() throws CustomException {
        return ResponseEntity.ok(administrateurService.getAllMakeupSessions());
    }

    @PutMapping("/makeup-sessions/{id}/approve")
    public ResponseEntity<PropositionDeRattrapageDTO> approveMakeupSession(
            @PathVariable Long id,
            @RequestParam(required = false) Long salleId) throws CustomException {
        return ResponseEntity.ok(administrateurService.approveMakeupSession(id, salleId));
    }

    @PutMapping("/makeup-sessions/{id}/reject")
    public ResponseEntity<PropositionDeRattrapageDTO> rejectMakeupSession(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(administrateurService.rejectMakeupSession(id));
    }

    @PutMapping("/makeup-sessions/{id}/approve-scheduled")
    public ResponseEntity<PropositionDeRattrapageDTO> approveScheduledSession(
            @PathVariable Long id,
            @RequestParam Long salleId) throws CustomException {
        return ResponseEntity.ok(administrateurService.approveScheduled(id, salleId));
    }

    @PutMapping("/makeup-sessions/{id}/reject-scheduled")
    public ResponseEntity<PropositionDeRattrapageDTO> rejectScheduledSession(
            @PathVariable Long id,
            @RequestParam String reason) throws CustomException {
        return ResponseEntity.ok(administrateurService.rejectScheduled(id, reason));
    }

    // ============================
    //    Conflict Management
    // ============================

    @GetMapping("/conflicts")
    public ResponseEntity<List<SeanceConflictDTO>> getAllConflicts() throws CustomException {
        return ResponseEntity.ok(seanceService.getAllConflicts());
    }

    @GetMapping("/conflicts/rooms")
    public ResponseEntity<List<SeanceRoomConflictDTO>> getRoomConflicts() throws CustomException {
        return ResponseEntity.ok(seanceService.getRoomConflicts());
    }

    @GetMapping("/conflicts/seances/{seanceId}")
    public ResponseEntity<List<SingleSeanceConflictDTO>> getConflictsForSession(@PathVariable Long seanceId) throws CustomException {
        return ResponseEntity.ok(seanceService.getConflictsForSession(seanceId));
    }

    // ============================
    //    Notification Management
    // ============================

    @PostMapping("/notifications/broadcast")
    public ResponseEntity<Void> broadcastNotification(@RequestBody NotificationDTO notification) throws CustomException {
        notificationService.broadcastNotification(notification);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/notifications/teachers")
    public ResponseEntity<Void> notifyTeachers(@RequestBody NotificationDTO notification) throws CustomException {
        notificationService.sendNotificationToTeachers(notification);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/notifications/students")
    public ResponseEntity<Void> notifyStudents(@RequestBody NotificationDTO notification) throws CustomException {
        notificationService.sendNotificationToStudents(notification);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/notifications/branches")
    public ResponseEntity<Void> notifyBranches(
            @RequestBody NotificationDTO notification,
            @RequestParam List<Long> branchIds) throws CustomException {
        // Note: You'll need to fetch BrancheDTOs using branchIds
        notificationService.sendNotificationToBranches(notification, null); // Implementation needed
        return ResponseEntity.ok().build();
    }

    // ============================
    //    Excel File Management
    // ============================

    @PostMapping("/excel/upload")
    public ResponseEntity<Void> uploadExcelFile(
            @RequestBody FichierExcelDTO file,
            @RequestBody List<SeanceDTO> seances) throws CustomException {
        excelFileService.upload(file, seances);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/excel/history")
    public ResponseEntity<List<FichierExcelDTO>> getImportHistory() throws CustomException {
        return ResponseEntity.ok(excelFileService.getImportHistory());
    }
}package com.scheduling.universityschedule_backend.controller;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.service.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.LocalDate;
import java.util.List;

/**
 * REST Controller for teacher operations.
 * Handles endpoints related to teaching schedules, makeup requests, and communications.
 *
 * @author Mahmoud-ABK
 * @version 1.0
 * @since 2025-05-04
 */
@RestController
@RequestMapping("/api/teachers")
public class EnseignantController {

    private final EnseignantService enseignantService;
    private final NotificationService notificationService;

    @Autowired
    public EnseignantController(
            EnseignantService enseignantService,
            NotificationService notificationService) {
        this.enseignantService = enseignantService;
        this.notificationService = notificationService;
    }

    // ============================
    //    Profile Management
    // ============================

    @GetMapping("/{id}")
    public ResponseEntity<EnseignantDTO> getTeacherProfile(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(enseignantService.findById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<EnseignantDTO> updateProfile(
            @PathVariable Long id,
            @RequestBody EnseignantDTO teacherDTO) throws CustomException {
        return ResponseEntity.ok(enseignantService.update(id, teacherDTO));
    }

    // ============================
    //    Schedule Management
    // ============================

    @GetMapping("/{id}/schedule")
    public ResponseEntity<List<SeanceDTO>> getSchedule(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(enseignantService.getSchedule(id));
    }

    @GetMapping("/{id}/teaching-hours")
    public ResponseEntity<Integer> getTeachingHours(
            @PathVariable Long id,
            @RequestParam LocalDate startDate,
            @RequestParam LocalDate endDate) throws CustomException {
        return ResponseEntity.ok(enseignantService.getTotalTeachingHours(id, startDate, endDate));
    }

    @GetMapping("/{id}/subjects")
    public ResponseEntity<List<String>> getSubjects(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(enseignantService.getSubjects(id));
    }

    @GetMapping("/{id}/student-groups")
    public ResponseEntity<List<TPDTO>> getStudentGroups(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(enseignantService.getStudentGroups(id));
    }

    // ============================
    //    Makeup Sessions
    // ============================

    @PostMapping("/{id}/makeup-requests")
    public ResponseEntity<PropositionDeRattrapageDTO> submitMakeupRequest(
            @PathVariable Long id,
            @RequestBody PropositionDeRattrapageDTO propositionDTO) throws CustomException {
        return ResponseEntity.ok(enseignantService.submitMakeupRequest(id, propositionDTO));
    }

    // ============================
    //    Communication
    // ============================

    @PostMapping("/{id}/signals")
    public ResponseEntity<SignalDTO> submitSignal(
            @PathVariable Long id,
            @RequestBody SignalDTO signalDTO) throws CustomException {
        return ResponseEntity.ok(enseignantService.submitSignal(id, signalDTO));
    }

    @GetMapping("/{id}/signals")
    public ResponseEntity<List<SignalDTO>> getSignals(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(enseignantService.getSignals(id));
    }

    // ============================
    //    Notifications
    // ============================

    @GetMapping("/{id}/notifications/unread")
    public ResponseEntity<List<NotificationDTO>> getUnreadNotifications() throws CustomException {
        return ResponseEntity.ok(notificationService.getUnreadNotifications());
    }

    @PutMapping("/notifications/{notificationId}/read")
    public ResponseEntity<Void> markNotificationAsRead(@PathVariable Long notificationId) throws CustomException {
        notificationService.markAsRead(notificationId);
        return ResponseEntity.ok().build();
    }
}package com.scheduling.universityschedule_backend.controller;

import com.scheduling.universityschedule_backend.dto.*;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.service.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

/**
 * REST Controller for student operations.
 * Handles endpoints related to schedules and notifications for students.
 *
 * @author Mahmoud-ABK
 * @version 1.0
 * @since 2025-05-04
 */
@RestController
@RequestMapping("/api/students")
public class EtudiantController {

    private final EtudiantService etudiantService;
    private final NotificationService notificationService;

    @Autowired
    public EtudiantController(
            EtudiantService etudiantService,
            NotificationService notificationService) {
        this.etudiantService = etudiantService;
        this.notificationService = notificationService;
    }

    // ============================
    //    Profile Management
    // ============================

    @GetMapping("/{id}")
    public ResponseEntity<EtudiantDTO> getStudentProfile(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(etudiantService.findById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<EtudiantDTO> updateProfile(
            @PathVariable Long id,
            @RequestBody EtudiantDTO studentDTO) throws CustomException {
        return ResponseEntity.ok(etudiantService.update(id, studentDTO));
    }

    // ============================
    //    Schedule Access
    // ============================

    @GetMapping("/{id}/schedule/personal")
    public ResponseEntity<List<SeanceDTO>> getPersonalSchedule(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(etudiantService.getPersonalSchedule(id));
    }

    @GetMapping("/{id}/schedule/branch")
    public ResponseEntity<List<SeanceDTO>> getBranchSchedule(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(etudiantService.getBranchSchedule(id));
    }

    @GetMapping("/{id}/schedule/td")
    public ResponseEntity<List<SeanceDTO>> getTDSchedule(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(etudiantService.getTDSchedule(id));
    }

    // ============================
    //    Notifications
    // ============================

    @GetMapping("/{id}/notifications")
    public ResponseEntity<List<NotificationDTO>> getNotifications(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(etudiantService.getNotifications(id));
    }

    @GetMapping("/{id}/notifications/unread")
    public ResponseEntity<List<NotificationDTO>> getUnreadNotifications() throws CustomException {
        return ResponseEntity.ok(notificationService.getUnreadNotifications());
    }

    @PutMapping("/notifications/{notificationId}/read")
    public ResponseEntity<Void> markNotificationAsRead(@PathVariable Long notificationId) throws CustomException {
        notificationService.markAsRead(notificationId);
        return ResponseEntity.ok().build();
    }
}package com.scheduling.universityschedule_backend.controller;

import com.scheduling.universityschedule_backend.dto.SalleDTO;
import com.scheduling.universityschedule_backend.exception.CustomException;
import com.scheduling.universityschedule_backend.service.SalleService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

/**
 * REST Controller for room management operations.
 * Handles endpoints related to room management by technicians.
 *
 * @author Mahmoud-ABK
 * @version 1.0
 * @since 2025-05-04
 */
@RestController
@RequestMapping("/api/rooms")
public class SalleController {

    private final SalleService salleService;

    @Autowired
    public SalleController(SalleService salleService) {
        this.salleService = salleService;
    }

    // ============================
    //    Room Management
    // ============================

    @GetMapping
    public ResponseEntity<List<SalleDTO>> getAllRooms() throws CustomException {
        return ResponseEntity.ok(salleService.findAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<SalleDTO> getRoomById(@PathVariable Long id) throws CustomException {
        return ResponseEntity.ok(salleService.findById(id));
    }

    @PostMapping
    public ResponseEntity<SalleDTO> createRoom(@RequestBody SalleDTO salleDTO) throws CustomException {
        return ResponseEntity.ok(salleService.create(salleDTO));
    }

    @PutMapping("/{id}")
    public ResponseEntity<SalleDTO> updateRoom(
            @PathVariable Long id,
            @RequestBody SalleDTO salleDTO) throws CustomException {
        return ResponseEntity.ok(salleService.update(id, salleDTO));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteRoom(@PathVariable Long id) throws CustomException {
        salleService.delete(id);
        return ResponseEntity.ok().build();
    }
}